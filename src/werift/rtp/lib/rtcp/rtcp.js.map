{"version":3,"file":"rtcp.js","sourceRoot":"","sources":["../../src/rtcp/rtcp.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,qCAAmD;AACnD,iCAAqD;AACrD,6BAAoC;AACpC,mCAAqD;AACrD,iCAAqD;AACrD,6BAAoC;AAEpC,MAAM,GAAG,GAAG,eAAK,CAAC,sBAAsB,CAAC,CAAC;AAS1C,MAAa,mBAAmB;IAC9B,MAAM,CAAC,SAAS,CACd,IAAY,EACZ,KAAa,EACb,OAAe,EACf,MAAc;QAEd,MAAM,MAAM,GAAG,IAAI,mBAAU,CAAC;YAC5B,IAAI;YACJ,KAAK;YACL,OAAO,EAAE,CAAC;YACV,MAAM;SACP,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAC/B,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,IAAY;QAC7B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAM,OAAO,GAAiB,EAAE,CAAC;QAEjC,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE;YACxB,MAAM,MAAM,GAAG,mBAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,oBAAW,CAAC,CAAC,CAAC;YAC1E,GAAG,IAAI,oBAAW,CAAC;YAEnB,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAEzB,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACnE;YAED,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACnB,KAAK,iBAAY,CAAC,IAAI;oBACpB,OAAO,CAAC,IAAI,CAAC,iBAAY,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC9D,MAAM;gBACR,KAAK,iBAAY,CAAC,IAAI;oBACpB,OAAO,CAAC,IAAI,CAAC,iBAAY,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC9D,MAAM;gBACR,KAAK,kCAA2B,CAAC,IAAI;oBACnC,OAAO,CAAC,IAAI,CACV,kCAA2B,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CACzD,CAAC;oBACF,MAAM;gBACR,KAAK,kCAA0B,CAAC,IAAI;oBAClC,OAAO,CAAC,IAAI,CAAC,kCAA0B,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;oBACtE,MAAM;gBACR,KAAK,kCAA2B,CAAC,IAAI;oBACnC,OAAO,CAAC,IAAI,CACV,kCAA2B,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CACzD,CAAC;oBACF,MAAM;gBACR;oBACE,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;oBACxC,MAAM;aACT;SACF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AA5DD,kDA4DC","sourcesContent":["import debug from \"debug\";\nimport { HEADER_SIZE, RtcpHeader } from \"./header\";\nimport { RtcpPayloadSpecificFeedback } from \"./psfb\";\nimport { RtcpRrPacket } from \"./rr\";\nimport { RtcpTransportLayerFeedback } from \"./rtpfb\";\nimport { RtcpSourceDescriptionPacket } from \"./sdes\";\nimport { RtcpSrPacket } from \"./sr\";\n\nconst log = debug(\"werift/rtp/rtcp/rtcp\");\n\nexport type RtcpPacket =\n  | RtcpRrPacket\n  | RtcpSrPacket\n  | RtcpPayloadSpecificFeedback\n  | RtcpSourceDescriptionPacket\n  | RtcpTransportLayerFeedback;\n\nexport class RtcpPacketConverter {\n  static serialize(\n    type: number,\n    count: number,\n    payload: Buffer,\n    length: number\n  ) {\n    const header = new RtcpHeader({\n      type,\n      count,\n      version: 2,\n      length,\n    });\n    const buf = header.serialize();\n    return Buffer.concat([buf, payload]);\n  }\n\n  static deSerialize(data: Buffer) {\n    let pos = 0;\n    const packets: RtcpPacket[] = [];\n\n    while (pos < data.length) {\n      const header = RtcpHeader.deSerialize(data.slice(pos, pos + HEADER_SIZE));\n      pos += HEADER_SIZE;\n\n      let payload = data.slice(pos);\n      pos += header.length * 4;\n\n      if (header.padding) {\n        payload = payload.slice(0, payload.length - payload.slice(-1)[0]);\n      }\n\n      switch (header.type) {\n        case RtcpSrPacket.type:\n          packets.push(RtcpSrPacket.deSerialize(payload, header.count));\n          break;\n        case RtcpRrPacket.type:\n          packets.push(RtcpRrPacket.deSerialize(payload, header.count));\n          break;\n        case RtcpSourceDescriptionPacket.type:\n          packets.push(\n            RtcpSourceDescriptionPacket.deSerialize(payload, header)\n          );\n          break;\n        case RtcpTransportLayerFeedback.type:\n          packets.push(RtcpTransportLayerFeedback.deSerialize(payload, header));\n          break;\n        case RtcpPayloadSpecificFeedback.type:\n          packets.push(\n            RtcpPayloadSpecificFeedback.deSerialize(payload, header)\n          );\n          break;\n        default:\n          log(\"unknown rtcp packet\", header.type);\n          break;\n      }\n    }\n\n    return packets;\n  }\n}\n"]}