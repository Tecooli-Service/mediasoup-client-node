{"version":3,"file":"srtp.js","sourceRoot":"","sources":["../../../src/srtp/context/srtp.ts"],"names":[],"mappings":";;;AAAA,uCAA0C;AAC1C,mCAA0D;AAC1D,uCAAoC;AACpC,yCAA8C;AAE9C,MAAa,WAAY,SAAQ,iBAAO;IACtC,YAAY,SAAiB,EAAE,UAAkB,EAAE,OAAe;QAChE,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,UAAU,CAAC,UAAkB,EAAE,MAAkB;QAC/C,MAAM,GAAG,MAAM,IAAI,eAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAErD,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,GAAG,GAAG,uBAAc,CAAC,GAAG,EAAE,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QAEnD,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAEzD,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEpD,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAClC,MAAM,CAAC,cAAc,EACrB,CAAC,CAAC,eAAe,EACjB,CAAC,CAAC,IAAI,EACN,IAAI,CAAC,eAAe,CACrB,CAAC;QACF,MAAM,MAAM,GAAG,yBAAgB,CAC7B,aAAa,EACb,IAAI,CAAC,cAAc,EACnB,OAAO,CACR,CAAC;QACF,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACvD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QAEpC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACvB,CAAC;IAED,UAAU,CAAC,OAAe,EAAE,MAAiB;QAC3C,MAAM,GAAG,GAAG,uBAAc,CACxB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EACf,MAAM,CAAC,aAAa,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAC3C,CAAC;QAEF,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QAEnD,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC;QAE7B,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAClC,MAAM,CAAC,cAAc,EACrB,CAAC,CAAC,eAAe,EACjB,CAAC,CAAC,IAAI,EACN,IAAI,CAAC,eAAe,CACrB,CAAC;QAEF,MAAM,MAAM,GAAG,uBAAc,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAC3E,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QACpC,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC;QAEpB,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CACtC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EACf,CAAC,CAAC,eAAe,CAClB,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AAnED,kCAmEC","sourcesContent":["import { RtpHeader } from \"../../rtp/rtp\";\nimport { createCipheriv, createDecipheriv } from \"crypto\";\nimport { Context } from \"./context\";\nimport { growBufferSize } from \"../../helper\";\n\nexport class SrtpContext extends Context {\n  constructor(masterKey: Buffer, masterSalt: Buffer, profile: number) {\n    super(masterKey, masterSalt, profile);\n  }\n\n  decryptRTP(ciphertext: Buffer, header?: RtpHeader): [Buffer, RtpHeader] {\n    header = header || RtpHeader.deSerialize(ciphertext);\n\n    const s = this.getSRTPSRRCState(header.ssrc);\n\n    let dst = Buffer.from([]);\n    dst = growBufferSize(dst, ciphertext.length - 10);\n    this.updateRolloverCount(header.sequenceNumber, s);\n\n    ciphertext = ciphertext.slice(0, ciphertext.length - 10);\n\n    ciphertext.slice(0, header.payloadOffset).copy(dst);\n\n    const counter = this.generateCounter(\n      header.sequenceNumber,\n      s.rolloverCounter,\n      s.ssrc,\n      this.srtpSessionSalt\n    );\n    const cipher = createDecipheriv(\n      \"aes-128-ctr\",\n      this.srtpSessionKey,\n      counter\n    );\n    const payload = ciphertext.slice(header.payloadOffset);\n    const buf = cipher.update(payload);\n    buf.copy(dst, header.payloadOffset);\n\n    return [dst, header];\n  }\n\n  encryptRTP(payload: Buffer, header: RtpHeader) {\n    const dst = growBufferSize(\n      Buffer.from([]),\n      header.serializeSize + payload.length + 10\n    );\n\n    const s = this.getSRTPSRRCState(header.ssrc);\n    this.updateRolloverCount(header.sequenceNumber, s);\n\n    header.serialize(dst.length).copy(dst);\n    let n = header.payloadOffset;\n\n    const counter = this.generateCounter(\n      header.sequenceNumber,\n      s.rolloverCounter,\n      s.ssrc,\n      this.srtpSessionSalt\n    );\n\n    const cipher = createCipheriv(\"aes-128-ctr\", this.srtpSessionKey, counter);\n    const buf = cipher.update(payload);\n    buf.copy(dst, header.payloadOffset);\n    n += payload.length;\n\n    const authTag = this.generateSrtpAuthTag(\n      dst.slice(0, n),\n      s.rolloverCounter\n    );\n    authTag.copy(dst, n);\n    return dst;\n  }\n}\n"]}