{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../sctp/src/utils.ts"],"names":[],"mappings":";;;AAAA,mCAAqC;AACrC,mCAAgC;AAEhC,SAAgB,QAAQ;IACtB,OAAO,eAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AAFD,4BAEC;AAED,SAAgB,QAAQ;IACtB,OAAO,MAAM,CAAC,eAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC;AAFD,4BAEC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AAC1B,CAAC;AAFD,8BAEC;AAED,SAAgB,UAAU,CAAC,CAAS,EAAE,CAAS;IAC7C,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;AAC/B,CAAC;AAFD,gCAEC;AAED,SAAgB,QAAQ,CAAC,CAAS,EAAE,CAAS;IAC3C,MAAM,OAAO,GAAG,MAAM,CAAC;IACvB,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,CAAC;AAHD,4BAGC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC;AAFD,8BAEC;AAED,SAAgB,QAAQ,CAAC,CAAS,EAAE,CAAS;IAC3C,MAAM,OAAO,GAAG,UAAU,CAAC;IAC3B,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,CAAC;AAHD,4BAGC;AAED,SAAgB,SAAS,CAAC,CAAS,EAAE,CAAS;IAC5C,OAAO,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC;AAFD,8BAEC","sourcesContent":["import { randomBytes } from \"crypto\";\nimport { jspack } from \"jspack\";\n\nexport function random16() {\n  return jspack.Unpack(\"!H\", randomBytes(2))[0];\n}\n\nexport function random32() {\n  return BigInt(jspack.Unpack(\"!L\", randomBytes(4))[0]);\n}\n\nexport function uint16Add(a: number, b: number) {\n  return (a + b) & 0xffff;\n}\n\nexport function uint32_add(a: bigint, b: bigint) {\n  return (a + b) & 0xffffffffn;\n}\n\nexport function uint16Gt(a: number, b: number) {\n  const halfMod = 0x8000;\n  return (a < b && b - a > halfMod) || (a > b && a - b < halfMod);\n}\n\nexport function uint16Gte(a: number, b: number) {\n  return a === b || uint16Gt(a, b);\n}\n\nexport function uint32Gt(a: number, b: number) {\n  const halfMod = 0x80000000;\n  return (a < b && b - a > halfMod) || (a > b && a - b < halfMod);\n}\n\nexport function uint32Gte(a: number, b: number) {\n  return a === b || uint32Gt(a, b);\n}\n"]}