{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../dtls/src/server.ts"],"names":[],"mappings":";;;;AAAA,6CAAkD;AAElD,4DAA+D;AAC/D,qDAAkD;AAClD,qDAAkD;AAClD,qDAAkD;AAClD,uDAAuD;AACvD,qCAA+C;AAC/C,0DAA0B;AAE1B,MAAM,GAAG,GAAG,eAAK,CAAC,oBAAoB,CAAC,CAAC;AAExC,MAAa,UAAW,SAAQ,mBAAU;IACxC,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,EAAE,sBAAW,CAAC,MAAM,CAAC,CAAC;QAM7B,qBAAgB,GAAG,CAAC,SAAgC,EAAE,EAAE;YAC9D,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;YAEnC,KAAK,MAAM,SAAS,IAAI,SAAS,EAAE;gBACjC,QAAQ,SAAS,CAAC,QAAQ,EAAE;oBAC1B,KAAK,qBAAa,CAAC,YAAY;wBAC7B;4BACE,MAAM,WAAW,GAAG,mBAAW,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;4BAEhE,IACE,IAAI,CAAC,IAAI,CAAC,MAAM;gCAChB,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAC3C;gCACA,GAAG,CAAC,cAAc,CAAC,CAAC;gCACpB,IAAI,iBAAO,CACT,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,IAAI,CACV,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;6BACpD;iCAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gCAC5B,GAAG,CAAC,cAAc,CAAC,CAAC;gCACpB,iBAAO,CACL,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,IAAI,CACV,CAAC,WAAW,CAAC,CAAC;6BAChB;yBACF;wBACD,MAAM;oBACR,KAAK,qBAAa,CAAC,mBAAmB;wBACpC;4BACE,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;4BACnE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;yBACzC;wBACD,MAAM;oBACR,KAAK,qBAAa,CAAC,QAAQ;wBACzB;4BACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;4BACxC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;4BAEpB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;4BACzB,GAAG,CAAC,gBAAgB,CAAC,CAAC;yBACvB;wBACD,MAAM;iBACT;aACF;QACH,CAAC,CAAC;QArDA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAChD,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;CAoDF;AAzDD,gCAyDC","sourcesContent":["import { HandshakeType } from \"./handshake/const\";\nimport { FragmentedHandshake } from \"./record/message/fragment\";\nimport { ClientHello } from \"./handshake/message/client/hello\";\nimport { flight2 } from \"./flight/server/flight2\";\nimport { Flight4 } from \"./flight/server/flight4\";\nimport { Flight6 } from \"./flight/server/flight6\";\nimport { SessionType } from \"./cipher/suites/abstract\";\nimport { DtlsSocket, Options } from \"./socket\";\nimport debug from \"debug\";\n\nconst log = debug(\"werift/dtls/server\");\n\nexport class DtlsServer extends DtlsSocket {\n  constructor(options: Options) {\n    super(options, SessionType.SERVER);\n    this.onHandleHandshakes = this.handleHandshakes;\n    log(\"start server\", options);\n  }\n\n  private flight6!: Flight6;\n  private handleHandshakes = (assembled: FragmentedHandshake[]) => {\n    log(\"handleHandshakes\", assembled);\n\n    for (const handshake of assembled) {\n      switch (handshake.msg_type) {\n        case HandshakeType.client_hello:\n          {\n            const clientHello = ClientHello.deSerialize(handshake.fragment);\n\n            if (\n              this.dtls.cookie &&\n              clientHello.cookie.equals(this.dtls.cookie)\n            ) {\n              log(\"send flight4\");\n              new Flight4(\n                this.transport,\n                this.dtls,\n                this.cipher,\n                this.srtp\n              ).exec(handshake, this.options.certificateRequest);\n            } else if (!this.dtls.cookie) {\n              log(\"send flight2\");\n              flight2(\n                this.transport,\n                this.dtls,\n                this.cipher,\n                this.srtp\n              )(clientHello);\n            }\n          }\n          break;\n        case HandshakeType.client_key_exchange:\n          {\n            this.flight6 = new Flight6(this.transport, this.dtls, this.cipher);\n            this.flight6.handleHandshake(handshake);\n          }\n          break;\n        case HandshakeType.finished:\n          {\n            this.flight6.handleHandshake(handshake);\n            this.flight6.exec();\n\n            this.onConnect.execute();\n            log(\"dtls connected\");\n          }\n          break;\n      }\n    }\n  };\n}\n"]}