{"version":3,"file":"rtpTransceiver.js","sourceRoot":"","sources":["../../../../src/media/rtpTransceiver.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,8DAA4B;AAC5B,mDAA6B;AAC7B,oCAA4C;AAW5C,MAAM,GAAG,GAAG,eAAK,CAAC,8BAA8B,CAAC,CAAC;AAElD,MAAa,iBAAiB;IAgC5B,YACkB,IAAU,EACV,QAAwB,EACxB,MAAoB,EAC7B,SAAoB,EACpB,aAA+B;QAJtB,SAAI,GAAJ,IAAI,CAAM;QACV,aAAQ,GAAR,QAAQ,CAAgB;QACxB,WAAM,GAAN,MAAM,CAAc;QAC7B,cAAS,GAAT,SAAS,CAAW;QACpB,kBAAa,GAAb,aAAa,CAAkB;QApC/B,SAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACjB,YAAO,GAAG,IAAI,iBAAK,EAAsB,CAAC;QAGnD,kBAAa,GAAG,KAAK,CAAC;QAad,YAAO,GAA4B,EAAE,CAAC;QAS9C,qBAAgB,GAAsC,EAAE,CAAC;QACzD,YAAO,GAAgC,EAAE,CAAC;QAC1C,aAAQ,GAAG,KAAK,CAAC;QACjB,YAAO,GAAG,KAAK,CAAC;IAQb,CAAC;IA/BJ,IAAI,gBAAgB,CAAC,SAAoB;QACvC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACnC,IAAI,wBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;YACrD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;IACH,CAAC;IACD,IAAI,gBAAgB;QAClB,0BAA0B;QAC1B,OAAO,IAAI,CAAC,iBAAwB,CAAC;IACvC,CAAC;IAGD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,IAAI,MAAM,CAAC,MAA+B;QACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IAcD,IAAI,IAAI;QACN,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC1D,CAAC;IAED,QAAQ,CAAC,KAAuB;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,GAAG;YAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,YAAY;IACZ,0CAA0C;IAC1C,IAAI;QACF,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE1B,oDAAoD;QAEpD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;CACF;AA1DD,8CA0DC;AAEY,QAAA,UAAU,GAAG;IACxB,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;CACF,CAAC","sourcesContent":["import debug from \"debug\";\nimport Event from \"rx.mini\";\nimport * as uuid from \"uuid\";\nimport { SenderDirections } from \"../const\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport {\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n} from \"./parameters\";\nimport { RTCRtpReceiver } from \"./rtpReceiver\";\nimport { RTCRtpSender } from \"./rtpSender\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:webrtc:rtpTransceiver\");\n\nexport class RTCRtpTransceiver {\n  readonly uuid = uuid.v4();\n  readonly onTrack = new Event<[MediaStreamTrack]>();\n  mid?: string;\n  mLineIndex?: number;\n  usedForSender = false;\n  private _currentDirection?: Direction | \"stopped\";\n  set currentDirection(direction: Direction) {\n    this._currentDirection = direction;\n    if (SenderDirections.includes(this._currentDirection)) {\n      this.usedForSender = true;\n    }\n  }\n  get currentDirection() {\n    // todo fix typescript 4.3\n    return this._currentDirection as any;\n  }\n  offerDirection!: Direction;\n  private _codecs: RTCRtpCodecParameters[] = [];\n  get codecs() {\n    return this._codecs;\n  }\n  set codecs(codecs: RTCRtpCodecParameters[]) {\n    this._codecs = codecs;\n    this.receiver.codecs = codecs;\n    this.sender.codec = codecs[0];\n  }\n  headerExtensions: RTCRtpHeaderExtensionParameters[] = [];\n  options: Partial<TransceiverOptions> = {};\n  stopping = false;\n  stopped = false;\n\n  constructor(\n    public readonly kind: Kind,\n    public readonly receiver: RTCRtpReceiver,\n    public readonly sender: RTCRtpSender,\n    public direction: Direction,\n    public dtlsTransport: RTCDtlsTransport\n  ) {}\n\n  get msid() {\n    return `${this.sender.streamId} ${this.sender.trackId}`;\n  }\n\n  addTrack(track: MediaStreamTrack) {\n    const res = this.receiver.addTrack(track);\n    if (res) this.onTrack.execute(track);\n  }\n\n  // todo impl\n  // https://www.w3.org/TR/webrtc/#methods-8\n  stop() {\n    if (this.stopping) return;\n\n    // todo Stop sending and receiving with transceiver.\n\n    this.stopping = true;\n  }\n}\n\nexport const Directions = [\n  \"inactive\",\n  \"sendonly\",\n  \"recvonly\",\n  \"sendrecv\",\n] as const;\n\nexport type Direction = typeof Directions[number];\n\ntype SimulcastDirection = \"send\" | \"recv\";\n\nexport interface TransceiverOptions {\n  direction: Direction;\n  simulcast: { direction: SimulcastDirection; rid: string }[];\n}\n"]}