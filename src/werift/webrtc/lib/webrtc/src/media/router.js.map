{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../src/media/router.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport {\n  Extension,\n  ReceiverEstimatedMaxBitrate,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpRrPacket,\n  RtcpSourceDescriptionPacket,\n  RtcpSrPacket,\n  RtcpTransportLayerFeedback,\n  RtpPacket,\n} from \"../../../rtp/src\";\nimport { bufferReader } from \"../../../rtp/src/helper\";\nimport { RTP_EXTENSION_URI } from \"../extension/rtpExtension\";\nimport {\n  RTCRtpReceiveParameters,\n  RTCRtpSimulcastParameters,\n} from \"./parameters\";\nimport { RTCRtpReceiver } from \"./rtpReceiver\";\nimport { RTCRtpSender } from \"./rtpSender\";\nimport { RTCRtpTransceiver } from \"./rtpTransceiver\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift/webrtc/media/router\");\n\nexport type Extensions = { [uri: string]: number | string };\n\nexport class RtpRouter {\n  private ssrcTable: { [ssrc: number]: RTCRtpReceiver | RTCRtpSender } = {};\n  private ridTable: { [rid: string]: RTCRtpReceiver | RTCRtpSender } = {};\n  private extIdUriMap: { [id: number]: string } = {};\n\n  constructor() {}\n\n  registerRtpSender(sender: RTCRtpSender) {\n    this.ssrcTable[sender.ssrc] = sender;\n  }\n\n  registerRtpReceiverBySsrc(\n    transceiver: RTCRtpTransceiver,\n    params: RTCRtpReceiveParameters\n  ) {\n    log(\"registerRtpReceiverBySsrc\", params);\n\n    const ssrcs = params.encodings\n      .map((encode) => encode.ssrc)\n      .filter((v) => v);\n\n    ssrcs.forEach((ssrc) => {\n      this.ssrcTable[ssrc] = transceiver.receiver;\n      transceiver.addTrack(\n        new MediaStreamTrack({\n          ssrc,\n          kind: transceiver.kind,\n          id: transceiver.sender.streamId,\n          remote: true,\n        })\n      );\n    });\n\n    params.headerExtensions.forEach((extension) => {\n      this.extIdUriMap[extension.id] = extension.uri;\n    });\n  }\n\n  registerRtpReceiverByRid(\n    transceiver: RTCRtpTransceiver,\n    param: RTCRtpSimulcastParameters\n  ) {\n    log(\"registerRtpReceiverByRid\", param);\n    transceiver.addTrack(\n      new MediaStreamTrack({\n        rid: param.rid,\n        kind: transceiver.kind,\n        id: transceiver.sender.streamId,\n        remote: true,\n      })\n    );\n    this.ridTable[param.rid] = transceiver.receiver;\n  }\n\n  static rtpHeaderExtensionsParser(\n    extensions: Extension[],\n    extIdUriMap: { [id: number]: string }\n  ): Extensions {\n    return extensions\n      .map((extension) => {\n        const uri = extIdUriMap[extension.id];\n        switch (uri) {\n          case RTP_EXTENSION_URI.sdesMid:\n          case RTP_EXTENSION_URI.sdesRTPStreamID:\n            return { uri, value: extension.payload.toString() };\n          case RTP_EXTENSION_URI.transportWideCC:\n            return { uri, value: extension.payload.readUInt16BE() };\n          case RTP_EXTENSION_URI.absSendTime:\n            return {\n              uri,\n              value: bufferReader(extension.payload, [3])[0],\n            };\n        }\n      })\n      .reduce((acc: { [uri: string]: any }, cur) => {\n        if (cur) acc[cur.uri] = cur.value;\n        return acc;\n      }, {});\n  }\n\n  routeRtp = (packet: RtpPacket) => {\n    const extensions = RtpRouter.rtpHeaderExtensionsParser(\n      packet.header.extensions,\n      this.extIdUriMap\n    );\n\n    let ssrcReceiver = this.ssrcTable[packet.header.ssrc] as RTCRtpReceiver;\n    const rid = extensions[RTP_EXTENSION_URI.sdesRTPStreamID] as string;\n\n    if (rid) {\n      ssrcReceiver = this.ridTable[rid] as RTCRtpReceiver;\n      ssrcReceiver.handleRtpByRid(packet, rid, extensions);\n    } else {\n      if (!ssrcReceiver) return; // simulcast + absSendTime\n\n      ssrcReceiver.handleRtpBySsrc(packet, extensions);\n    }\n\n    ssrcReceiver.sdesMid = extensions[RTP_EXTENSION_URI.sdesMid] as string;\n  };\n\n  routeRtcp = (packet: RtcpPacket) => {\n    const recipients: (RTCRtpReceiver | RTCRtpSender)[] = [];\n\n    switch (packet.type) {\n      case RtcpSrPacket.type:\n        {\n          packet = packet as RtcpSrPacket;\n          recipients.push(this.ssrcTable[packet.ssrc]);\n        }\n        break;\n      case RtcpRrPacket.type:\n        {\n          packet = packet as RtcpRrPacket;\n          packet.reports.forEach((report) => {\n            recipients.push(this.ssrcTable[report.ssrc]);\n          });\n        }\n        break;\n      case RtcpSourceDescriptionPacket.type:\n        {\n          const sdes = packet as RtcpSourceDescriptionPacket;\n          // log(\"sdes\", JSON.stringify(sdes.chunks));\n        }\n        break;\n      case RtcpTransportLayerFeedback.type:\n        {\n          const rtpfb = packet as RtcpTransportLayerFeedback;\n          if (rtpfb.feedback) {\n            recipients.push(this.ssrcTable[rtpfb.feedback.mediaSourceSsrc]);\n          }\n        }\n        break;\n      case RtcpPayloadSpecificFeedback.type:\n        {\n          const psfb = packet as RtcpPayloadSpecificFeedback;\n          switch (psfb.feedback.count) {\n            case ReceiverEstimatedMaxBitrate.count:\n              const remb = psfb.feedback as ReceiverEstimatedMaxBitrate;\n              recipients.push(this.ssrcTable[remb.ssrcFeedbacks[0]]);\n              break;\n            default:\n              recipients.push(this.ssrcTable[psfb.feedback.senderSsrc]);\n          }\n        }\n        break;\n    }\n    recipients\n      .filter((v) => v) // todo simulcast\n      .forEach((recipient) => recipient.handleRtcpPacket(packet));\n  };\n}\n"]}