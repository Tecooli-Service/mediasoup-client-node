{"version":3,"file":"parameters.js","sourceRoot":"","sources":["../../../../src/media/parameters.ts"],"names":[],"mappings":";;;AAAA,MAAa,gBAAgB;IAO3B,YAAY,QAAmC,EAAE;QANjD,WAAM,GAA4B,EAAE,CAAC;QACrC,qBAAgB,GAAsC,EAAE,CAAC;QAMvD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAVD,4CAUC;AAED,MAAa,qBAAqB;IAKhC,YAAY,aAA6C,EAAE;QAD3D,eAAU,GAAG,EAAE,CAAC;QAEd,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;CACF;AAZD,sDAYC;AAID,MAAa,qBAAqB;IAQhC,YACE,KACgC;QALlC,iBAAY,GAAa,EAAE,CAAC;QAC5B,eAAU,GAAG,EAAE,CAAC;QAMd,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,GAAG;QACL,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QACzC,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC;YAAE,CAAC,IAAI,IAAI,CAAC;QACnC,OAAO,CAAC,CAAC;IACX,CAAC;CACF;AAxBD,sDAwBC;AAED,MAAa,+BAA+B;IAI1C,YAAY,QAAkD,EAAE;QAC9D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAPD,0EAOC;AAED,MAAa,iBAAiB;IAK5B,YAAY,QAAoC,EAAE;QAHlD,QAAG,GAAY,KAAK,CAAC;QAInB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AARD,8CAQC;AAED,MAAa,eAAe;IAI1B,YAAY,QAAkC,EAAE;QAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAPD,0CAOC;AACD,MAAa,mBAAmB;IAG9B,YAAY,QAAsC,EAAE;QAClD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAND,kDAMC;AAED,MAAa,sBAAsB;IAKjC,YACE,KACsD;QAEtD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAXD,wDAWC;AAED,MAAa,uBAAwB,SAAQ,gBAAgB;IAG3D,YAAY,KAAuC;QACjD,KAAK,CAAC,KAAK,CAAC,CAAC;QAHf,cAAS,GAA6B,EAAE,CAAC;QAIvC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAPD,0DAOC;AAED,MAAa,yBAAyB;IAGpC,YAAY,KAAgC;QAC1C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAND,8DAMC","sourcesContent":["export class RTCRtpParameters {\n  codecs: RTCRtpCodecParameters[] = [];\n  headerExtensions: RTCRtpHeaderExtensionParameters[] = [];\n  muxId!: string;\n  rid?: string;\n  rtcp!: RTCRtcpParameters;\n\n  constructor(props: Partial<RTCRtpParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtpCodecCapability {\n  mimeType!: string;\n  clockRate!: number;\n  channels?: number;\n  parameters = {};\n  constructor(parameters: Partial<RTCRtpCodecCapability> = {}) {\n    Object.assign(this, parameters);\n  }\n\n  get name() {\n    return this.mimeType.split(\"/\")[1];\n  }\n}\n\nexport type RTCPFB = { type: string; parameter?: string };\n\nexport class RTCRtpCodecParameters {\n  payloadType!: number;\n  mimeType!: string;\n  clockRate!: number;\n  channels?: number;\n  rtcpFeedback: RTCPFB[] = [];\n  parameters = {};\n\n  constructor(\n    props: Pick<RTCRtpCodecParameters, \"mimeType\" | \"clockRate\"> &\n      Partial<RTCRtpCodecParameters>\n  ) {\n    Object.assign(this, props);\n  }\n\n  get name() {\n    return this.mimeType.split(\"/\")[1];\n  }\n\n  get str() {\n    let s = `${this.name}/${this.clockRate}`;\n    if (this.channels === 2) s += \"/2\";\n    return s;\n  }\n}\n\nexport class RTCRtpHeaderExtensionParameters {\n  id!: number;\n  uri!: string;\n\n  constructor(props: Partial<RTCRtpHeaderExtensionParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtcpParameters {\n  cname?: string;\n  mux: boolean = false;\n  ssrc?: number;\n\n  constructor(props: Partial<RTCRtcpParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtcpFeedback {\n  type!: string;\n  parameter?: string;\n\n  constructor(props: Partial<RTCRtcpFeedback> = {}) {\n    Object.assign(this, props);\n  }\n}\nexport class RTCRtpRtxParameters {\n  ssrc!: number;\n\n  constructor(props: Partial<RTCRtpRtxParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtpCodingParameters {\n  ssrc!: number;\n  payloadType!: number;\n  rtx?: RTCRtpRtxParameters;\n\n  constructor(\n    props: Partial<RTCRtpCodingParameters> &\n      Pick<RTCRtpCodingParameters, \"ssrc\" | \"payloadType\">\n  ) {\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtpReceiveParameters extends RTCRtpParameters {\n  encodings: RTCRtpCodingParameters[] = [];\n\n  constructor(props: Partial<RTCRtpReceiveParameters>) {\n    super(props);\n    Object.assign(this, props);\n  }\n}\n\nexport class RTCRtpSimulcastParameters {\n  rid!: string;\n  direction!: \"send\" | \"recv\";\n  constructor(props: RTCRtpSimulcastParameters) {\n    Object.assign(this, props);\n  }\n}\n"]}