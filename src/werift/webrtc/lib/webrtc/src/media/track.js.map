{"version":3,"file":"track.js","sourceRoot":"","sources":["../../../../src/media/track.ts"],"names":[],"mappings":";;;;AAAA,8DAA4B;AAC5B,+BAA0B;AAC1B,0CAAwD;AACxD,sCAAwC;AAIxC,MAAa,gBAAiB,SAAQ,oBAAW;IAe/C,YACE,KAAiE;QAEjE,KAAK,EAAE,CAAC;QAjBV,WAAM,GAAG,KAAK,CAAC;QAEf,OAAE,GAAW,SAAE,EAAE,CAAC;QAOT,iBAAY,GAAG,IAAI,iBAAK,EAAe,CAAC;QAEjD,YAAO,GAAG,KAAK,CAAC;QAChB,UAAK,GAAG,IAAI,CAAC;QAgBb,SAAI,GAAG,GAAG,EAAE;YACV,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC,CAAC;QAEF,aAAQ,GAAG,CAAC,GAAuB,EAAE,EAAE;YACrC,IAAI,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO;gBAAE,OAAO;YAExC,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,eAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACvE,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;YACnD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC,CAAC;QAvBA,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAE3B,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IAClE,CAAC;CAgBF;AA3CD,4CA2CC","sourcesContent":["import Event from \"rx.mini\";\nimport { v4 } from \"uuid\";\nimport { RtpHeader, RtpPacket } from \"../../../rtp/src\";\nimport { EventTarget } from \"../helper\";\nimport { Kind } from \"../types/domain\";\nimport { RTCRtpCodecParameters } from \"./parameters\";\n\nexport class MediaStreamTrack extends EventTarget {\n  remote = false;\n  label: string;\n  id: string = v4();\n  kind!: Kind;\n  ssrc?: number;\n  rid?: string;\n  header?: RtpHeader;\n  codec?: RTCRtpCodecParameters;\n\n  readonly onReceiveRtp = new Event<[RtpPacket]>();\n\n  stopped = false;\n  muted = true;\n\n  constructor(\n    props: Partial<MediaStreamTrack> & Pick<MediaStreamTrack, \"kind\">\n  ) {\n    super();\n    Object.assign(this, props);\n\n    this.onReceiveRtp.subscribe((rtp) => {\n      this.muted = false;\n      this.header = rtp.header;\n    });\n\n    this.label = `${this.remote ? \"remote\" : \"local\"} ${this.kind}`;\n  }\n\n  stop = () => {\n    this.stopped = true;\n    this.muted = true;\n    this.onReceiveRtp.complete();\n  };\n\n  writeRtp = (rtp: RtpPacket | Buffer) => {\n    if (this.remote) throw new Error(\"this is remoteTrack\");\n    if (!this.codec || this.stopped) return;\n\n    const packet = Buffer.isBuffer(rtp) ? RtpPacket.deSerialize(rtp) : rtp;\n    packet.header.payloadType = this.codec.payloadType;\n    this.onReceiveRtp.execute(packet);\n  };\n}\n"]}