{"version":3,"file":"rtpReceiver.js","sourceRoot":"","sources":["../../../../src/media/rtpReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport {\n  PictureLossIndication,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpRrPacket,\n  RtcpSrPacket,\n  RtpPacket,\n} from \"../../../rtp/src\";\nimport { RTP_EXTENSION_URI } from \"../extension/rtpExtension\";\nimport { sleep } from \"../helper\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport { Nack } from \"./nack\";\nimport { RTCRtpCodecParameters } from \"./parameters\";\nimport { ReceiverTWCC } from \"./receiver/receiverTwcc\";\nimport { Extensions } from \"./router\";\nimport { MediaStreamTrack } from \"./track\";\n\nexport class RTCRtpReceiver {\n  readonly type = \"receiver\";\n  readonly uuid = uuid();\n  readonly tracks: MediaStreamTrack[] = [];\n  readonly trackBySSRC: { [ssrc: string]: MediaStreamTrack } = {};\n  readonly trackByRID: { [rid: string]: MediaStreamTrack } = {};\n  readonly nack = new Nack(this);\n  readonly lsr: { [key: number]: BigInt } = {};\n  readonly lsrTime: { [key: number]: number } = {};\n\n  sdesMid?: string;\n  rid?: string;\n  receiverTWCC?: ReceiverTWCC;\n  supportTWCC = false;\n  codecs: RTCRtpCodecParameters[] = [];\n\n  constructor(\n    public kind: Kind,\n    public dtlsTransport: RTCDtlsTransport,\n    public rtcpSsrc: number\n  ) {}\n\n  /**\n   * setup TWCC if supported\n   * @param mediaSourceSsrc\n   */\n  setupTWCC(mediaSourceSsrc?: number) {\n    this.supportTWCC = !!this.codecs.find((codec) =>\n      codec.rtcpFeedback.find((v) => v.type === \"transport-cc\")\n    );\n    if (this.supportTWCC && mediaSourceSsrc) {\n      this.receiverTWCC = new ReceiverTWCC(\n        this.dtlsTransport,\n        this.rtcpSsrc,\n        mediaSourceSsrc\n      );\n    }\n  }\n\n  addTrack(track: MediaStreamTrack) {\n    const exist = this.tracks.find((t) => {\n      if (t.rid) return t.rid === track.rid;\n      if (t.ssrc) return t.ssrc === track.ssrc;\n    });\n    if (!exist) {\n      this.tracks.push(track);\n      if (track.ssrc) this.trackBySSRC[track.ssrc] = track;\n      if (track.rid) this.trackByRID[track.rid] = track;\n      return true;\n    }\n    return false;\n  }\n\n  stop() {\n    this.rtcpRunning = false;\n    if (this.receiverTWCC) this.receiverTWCC.twccRunning = false;\n  }\n\n  rtcpRunning = false;\n  async runRtcp() {\n    if (this.rtcpRunning) return;\n    this.rtcpRunning = true;\n\n    while (this.rtcpRunning) {\n      await sleep(500 + Math.random() * 1000);\n\n      const reports = [];\n      const packet = new RtcpRrPacket({ ssrc: this.rtcpSsrc, reports });\n\n      try {\n        await this.dtlsTransport.sendRtcp([packet]);\n      } catch (error) {\n        await sleep(500 + Math.random() * 1000);\n      }\n    }\n  }\n\n  async sendRtcpPLI(mediaSsrc: number) {\n    const packet = new RtcpPayloadSpecificFeedback({\n      feedback: new PictureLossIndication({\n        senderSsrc: this.rtcpSsrc,\n        mediaSsrc,\n      }),\n    });\n    try {\n      await this.dtlsTransport.sendRtcp([packet]);\n    } catch (error) {}\n  }\n\n  handleRtcpPacket(packet: RtcpPacket) {\n    switch (packet.type) {\n      case RtcpSrPacket.type:\n        {\n          const sr = packet as RtcpSrPacket;\n          this.lsr[sr.ssrc] = (sr.senderInfo.ntpTimestamp >> 16n) & 0xffffffffn;\n          this.lsrTime[sr.ssrc] = Date.now() / 1000;\n        }\n        break;\n    }\n  }\n\n  handleRtpBySsrc = (packet: RtpPacket, extensions: Extensions) => {\n    const track = this.trackBySSRC[packet.header.ssrc];\n    if (!track) throw new Error();\n\n    this.handleRTP(track, packet, extensions);\n  };\n\n  handleRtpByRid = (packet: RtpPacket, rid: string, extensions: Extensions) => {\n    const track = this.trackByRID[rid];\n    if (!track) throw new Error();\n\n    this.handleRTP(track, packet, extensions);\n  };\n\n  private handleRTP(\n    track: MediaStreamTrack,\n    packet: RtpPacket,\n    extensions: Extensions\n  ) {\n    if (this.receiverTWCC) {\n      const transportSequenceNumber = extensions[\n        RTP_EXTENSION_URI.transportWideCC\n      ] as number;\n      if (!transportSequenceNumber == undefined) throw new Error();\n\n      this.receiverTWCC.handleTWCC(transportSequenceNumber);\n    } else if (this.supportTWCC) {\n      this.setupTWCC(packet.header.ssrc);\n    }\n\n    if (track.kind === \"video\") this.nack.onPacket(packet);\n    track.onReceiveRtp.execute(packet);\n\n    this.runRtcp();\n  }\n}\n"]}