{"version":3,"file":"nack.js","sourceRoot":"","sources":["../../../../src/media/nack.ts"],"names":[],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\nimport {\n  GenericNack,\n  RtcpTransportLayerFeedback,\n  RtpPacket,\n} from \"../../../rtp/src\";\nimport { uint16Add } from \"../utils\";\nimport { RTCRtpReceiver } from \"./rtpReceiver\";\n\nconst LOST_SIZE = 30 * 5;\n\nexport class Nack {\n  private newEstSeqNum = 0;\n  private _lost: { [seqNum: number]: number } = {};\n\n  mediaSourceSsrc?: number;\n\n  constructor(private receiver: RTCRtpReceiver) {\n    setInterval(() => this.packetLost(), 20);\n  }\n\n  get lost() {\n    return Object.keys(this._lost).map(Number);\n  }\n\n  onPacket(packet: RtpPacket) {\n    const { sequenceNumber, ssrc } = packet.header;\n    this.mediaSourceSsrc = ssrc;\n\n    if (this.newEstSeqNum === 0) {\n      this.newEstSeqNum = sequenceNumber;\n      return;\n    }\n\n    if (this._lost[sequenceNumber]) {\n      delete this._lost[sequenceNumber];\n      return;\n    }\n\n    if (sequenceNumber === uint16Add(this.newEstSeqNum, 1)) {\n      this.newEstSeqNum = sequenceNumber;\n    } else if (sequenceNumber > uint16Add(this.newEstSeqNum, 1)) {\n      // packet lost detected\n      range(uint16Add(this.newEstSeqNum, 1), sequenceNumber).forEach((seq) => {\n        this._lost[seq] = 1;\n      });\n      this.receiver.sendRtcpPLI(this.mediaSourceSsrc);\n\n      this.newEstSeqNum = sequenceNumber;\n\n      if (Object.keys(this._lost).length > LOST_SIZE) {\n        this._lost = Object.entries(this._lost)\n          .slice(-LOST_SIZE)\n          .reduce((acc, [key, v]) => {\n            acc[key] = v;\n            return acc;\n          }, {} as { [seqNum: number]: number });\n      }\n    }\n  }\n\n  private increment() {\n    Object.keys(this._lost).forEach((seq) => {\n      if (++this._lost[seq] > 10) {\n        delete this._lost[seq];\n      }\n    });\n  }\n\n  private packetLost() {\n    if (this.lost.length > 0 && this.mediaSourceSsrc) {\n      const rtcp = new RtcpTransportLayerFeedback({\n        feedback: new GenericNack({\n          senderSsrc: this.receiver.rtcpSsrc,\n          mediaSourceSsrc: this.mediaSourceSsrc,\n          lost: this.lost,\n        }),\n      });\n      this.receiver.dtlsTransport.sendRtcp([rtcp]);\n\n      this.increment();\n    }\n  }\n}\n"]}