{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../src/helper.ts"],"names":[],"mappings":";;;;AAAA,4DAAkC;AAElC,SAAgB,SAAS,CAAI,GAAQ;IACnC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC;AAFD,8BAEC;AAEM,KAAK,UAAU,KAAK,CAAC,EAAU;IACpC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC9C,CAAC;AAFD,sBAEC;AAED,SAAgB,MAAM,CAAC,IAAY,EAAE,KAAa;IAChD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5C,CAAC;AAHD,wBAGC;AAED,MAAa,YAAY;IAAzB;QACE,UAAK,GAAwD,EAAE,CAAC;QAChE,YAAO,GAAG,KAAK,CAAC;QAEhB,SAAI,GAAG,CAAC,OAA2B,EAAE,EAAE,CACrC,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,OAAO;gBAAE,IAAI,CAAC,GAAG,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IAcP,CAAC;IAZC,KAAK,CAAC,GAAG;QACP,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;YAEZ,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;CACF;AAtBD,oCAsBC;AAED,MAAa,WAAY,SAAQ,gBAAY;IAA7C;;QACE,qBAAgB,GAAG,CAAC,IAAY,EAAE,QAAkC,EAAE,EAAE;YACtE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC;IACJ,CAAC;CAAA;AAJD,kCAIC","sourcesContent":["import EventEmitter from \"events\";\n\nexport function enumerate<T>(arr: T[]): [number, T][] {\n  return arr.map((v, i) => [i, v]);\n}\n\nexport async function sleep(ms: number) {\n  await new Promise((r) => setTimeout(r, ms));\n}\n\nexport function divide(from: string, split: string): [string, string] {\n  const arr = from.split(split);\n  return [arr[0], arr.slice(1).join(split)];\n}\n\nexport class PromiseQueue {\n  queue: { promise: () => Promise<any>; call: () => void }[] = [];\n  running = false;\n\n  push = (promise: () => Promise<any>) =>\n    new Promise<void>((r) => {\n      this.queue.push({ promise, call: r });\n      if (!this.running) this.run();\n    });\n\n  async run() {\n    const task = this.queue.shift();\n    if (task) {\n      this.running = true;\n      await task.promise();\n      task.call();\n\n      this.run();\n    } else {\n      this.running = false;\n    }\n  }\n}\n\nexport class EventTarget extends EventEmitter {\n  addEventListener = (type: string, listener: (...args: any[]) => void) => {\n    this.addListener(type, listener);\n  };\n}\n"]}