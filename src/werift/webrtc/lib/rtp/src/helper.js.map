{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../../rtp/src/helper.ts"],"names":[],"mappings":";;;AAAA,SAAgB,SAAS,CAAI,GAAQ;IACnC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC;AAFD,8BAEC;AAEM,KAAK,UAAU,KAAK,CAAC,EAAU;IACpC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC9C,CAAC;AAFD,sBAEC;AAED,SAAgB,YAAY,CAAC,KAAe,EAAE,MAA2B;IACvE,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;IACxD,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACtB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,KAAK,CAAC;YAAE,GAAG,CAAC,gBAAgB,CAAC,CAAW,EAAE,MAAM,CAAC,CAAC;;YACrD,GAAG,CAAC,WAAW,CAAC,CAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAEhD,MAAM,IAAI,IAAI,CAAC;IACjB,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AAbD,oCAaC;AAED,SAAgB,YAAY,CAAC,GAAW,EAAE,KAAe;IACvD,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACrB,IAAI,IAAqB,CAAC;QAC1B,IAAI,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SAClC;QAED,MAAM,IAAI,CAAC,CAAC;QAEZ,OAAO,IAAW,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC;AAdD,oCAcC;AAED,SAAgB,cAAc,CAAC,GAAW,EAAE,IAAY;IACtD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,OAAO,IAAI,CAAC;AACd,CAAC;AAJD,wCAIC;AAED,SAAgB,GAAG,CAAC,CAAS;IAC3B,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;AACpC,CAAC;AAFD,kBAEC","sourcesContent":["export function enumerate<T>(arr: T[]): [number, T][] {\n  return arr.map((v, i) => [i, v]);\n}\n\nexport async function sleep(ms: number) {\n  await new Promise((r) => setTimeout(r, ms));\n}\n\nexport function bufferWriter(bytes: number[], values: (number | bigint)[]) {\n  const length = bytes.reduce((acc, cur) => acc + cur, 0);\n  const buf = Buffer.alloc(length);\n  let offset = 0;\n\n  values.forEach((v, i) => {\n    const size = bytes[i];\n    if (size === 8) buf.writeBigUInt64BE(v as bigint, offset);\n    else buf.writeUIntBE(v as number, offset, size);\n\n    offset += size;\n  });\n  return buf;\n}\n\nexport function bufferReader(buf: Buffer, bytes: number[]) {\n  let offset = 0;\n  return bytes.map((v) => {\n    let read: number | bigint;\n    if (v === 8) {\n      read = buf.readBigUInt64BE(offset);\n    } else {\n      read = buf.readUIntBE(offset, v);\n    }\n\n    offset += v;\n\n    return read as any;\n  });\n}\n\nexport function growBufferSize(buf: Buffer, size: number) {\n  const glow = Buffer.alloc(size);\n  buf.copy(glow);\n  return glow;\n}\n\nexport function Int(v: number) {\n  return parseInt(v.toString(), 10);\n}\n"]}