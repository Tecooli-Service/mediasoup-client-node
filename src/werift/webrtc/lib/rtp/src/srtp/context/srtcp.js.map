{"version":3,"file":"srtcp.js","sourceRoot":"","sources":["../../../../../../rtp/src/srtp/context/srtcp.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipheriv, createDecipheriv } from \"crypto\";\nimport { Context } from \"./context\";\nimport { RtcpHeader } from \"../../rtcp/header\";\n\nexport class SrtcpContext extends Context {\n  constructor(masterKey: Buffer, masterSalt: Buffer, profile: number) {\n    super(masterKey, masterSalt, profile);\n  }\n  decryptRTCP(encrypted: Buffer): [Buffer, RtcpHeader] {\n    const header = RtcpHeader.deSerialize(encrypted);\n\n    const tailOffset = encrypted.length - (10 + 4);\n    const out = Buffer.from(encrypted).slice(0, tailOffset);\n\n    const isEncrypted = encrypted[tailOffset] >> 7;\n    if (isEncrypted === 0) return [out, header];\n\n    let index = encrypted.readUInt32BE(tailOffset);\n    index &= ~(1 << 31);\n\n    const ssrc = encrypted.readUInt32BE(4);\n\n    const actualTag = encrypted.slice(encrypted.length - 10);\n\n    const counter = this.generateCounter(\n      index & 0xffff,\n      index >> 16,\n      ssrc,\n      this.srtcpSessionSalt\n    );\n    const cipher = createDecipheriv(\n      \"aes-128-ctr\",\n      this.srtcpSessionKey,\n      counter\n    );\n    const buf = cipher.update(out.slice(8));\n    buf.copy(out, 8);\n    return [out, header];\n  }\n\n  encryptRTCP(rawRtcp: Buffer): Buffer {\n    let out = Buffer.from(rawRtcp);\n    const ssrc = out.readUInt32BE(4);\n    const s = this.getSRTCPSSRCState(ssrc);\n    s.srtcpIndex++;\n    if (s.srtcpIndex >> 0x7fffffff) {\n      s.srtcpIndex = 0;\n    }\n\n    const counter = this.generateCounter(\n      s.srtcpIndex & 0xffff,\n      s.srtcpIndex >> 16,\n      ssrc,\n      this.srtcpSessionSalt\n    );\n    const cipher = createCipheriv(\"aes-128-ctr\", this.srtcpSessionKey, counter);\n    // Encrypt everything after header\n    const buf = cipher.update(out.slice(8));\n    buf.copy(out, 8);\n    out = Buffer.concat([out, Buffer.alloc(4)]);\n    out.writeUInt32BE(s.srtcpIndex, out.length - 4);\n    out[out.length - 4] |= 0x80;\n    const authTag = this.generateSrtcpAuthTag(out);\n    out = Buffer.concat([out, authTag]);\n\n    return out;\n  }\n}\n"]}