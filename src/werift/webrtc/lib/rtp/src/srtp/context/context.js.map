{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../../../rtp/src/srtp/context/context.ts"],"names":[],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\nimport { AES } from \"aes-js\";\nimport { createHmac } from \"crypto\";\nimport bigInt from \"big-integer\";\n\nexport class Context {\n  srtpSSRCStates: { [key: number]: SrtpSSRCState } = {};\n  srtpSessionKey = this.generateSessionKey(0);\n  srtpSessionSalt = this.generateSessionSalt(2);\n  srtpSessionAuthTag = this.generateSessionAuthTag(1);\n  srtpSessionAuth = createHmac(\"sha1\", this.srtpSessionAuthTag);\n  srtcpSSRCStates: { [key: number]: SrtcpSSRCState } = {};\n  srtcpSessionKey = this.generateSessionKey(3);\n  srtcpSessionSalt = this.generateSessionSalt(5);\n  srtcpSessionAuthTag = this.generateSessionAuthTag(4);\n  srtcpSessionAuth = createHmac(\"sha1\", this.srtcpSessionAuthTag);\n\n  constructor(\n    public masterKey: Buffer,\n    public masterSalt: Buffer,\n    public profile: number\n  ) {}\n\n  generateSessionKey(label: number) {\n    let sessionKey = Buffer.from(this.masterSalt);\n\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionKey.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionKey[j] = sessionKey[j] ^ labelAndIndexOverKdr[i];\n    }\n\n    sessionKey = Buffer.concat([sessionKey, Buffer.from([0x00, 0x00])]);\n    const block = new AES(this.masterKey);\n    return Buffer.from(block.encrypt(sessionKey) as ArrayBuffer);\n  }\n\n  generateSessionSalt(label: number) {\n    let sessionSalt = Buffer.from(this.masterSalt);\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionSalt.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionSalt[j] = sessionSalt[j] ^ labelAndIndexOverKdr[i];\n    }\n    sessionSalt = Buffer.concat([sessionSalt, Buffer.from([0x00, 0x00])]);\n    const block = new AES(this.masterKey);\n    sessionSalt = Buffer.from(block.encrypt(sessionSalt) as ArrayBuffer);\n    return sessionSalt.slice(0, 14);\n  }\n\n  generateSessionAuthTag(label: number) {\n    const sessionAuthTag = Buffer.from(this.masterSalt);\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionAuthTag.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionAuthTag[j] = sessionAuthTag[j] ^ labelAndIndexOverKdr[i];\n    }\n    let firstRun = Buffer.concat([sessionAuthTag, Buffer.from([0x00, 0x00])]);\n    let secondRun = Buffer.concat([sessionAuthTag, Buffer.from([0x00, 0x01])]);\n    const block = new AES(this.masterKey);\n    firstRun = Buffer.from(block.encrypt(firstRun) as ArrayBuffer);\n    secondRun = Buffer.from(block.encrypt(secondRun) as ArrayBuffer);\n    return Buffer.concat([firstRun, secondRun.slice(0, 4)]);\n  }\n\n  getSRTPSRRCState(ssrc: number) {\n    let s = this.srtpSSRCStates[ssrc];\n    if (s) return s;\n    s = {\n      ssrc,\n      rolloverCounter: 0,\n      lastSequenceNumber: 0,\n    };\n    this.srtpSSRCStates[ssrc] = s;\n    return s;\n  }\n\n  getSRTCPSSRCState(ssrc: number) {\n    let s = this.srtcpSSRCStates[ssrc];\n    if (s) return s;\n    s = {\n      srtcpIndex: 0,\n      ssrc,\n    };\n    this.srtcpSSRCStates[ssrc] = s;\n    return s;\n  }\n\n  updateRolloverCount(sequenceNumber: number, s: SrtpSSRCState) {\n    if (!s.rolloverHasProcessed) {\n      s.rolloverHasProcessed = true;\n    } else if (sequenceNumber === 0) {\n      if (s.lastSequenceNumber > MaxROCDisorder) {\n        s.rolloverCounter++;\n      }\n    } else if (\n      s.lastSequenceNumber < MaxROCDisorder &&\n      sequenceNumber > MaxSequenceNumber - MaxROCDisorder\n    ) {\n      s.rolloverCounter--;\n    } else if (\n      sequenceNumber < MaxROCDisorder &&\n      s.lastSequenceNumber > MaxSequenceNumber - MaxROCDisorder\n    ) {\n      s.rolloverCounter++;\n    }\n    s.lastSequenceNumber = sequenceNumber;\n  }\n\n  generateCounter(\n    sequenceNumber: number,\n    rolloverCounter: number,\n    ssrc: number,\n    sessionSalt: Buffer\n  ) {\n    const counter = Buffer.alloc(16);\n    counter.writeUInt32BE(ssrc, 4);\n    counter.writeUInt32BE(rolloverCounter, 8);\n    counter.writeUInt32BE(\n      bigInt(sequenceNumber).shiftLeft(16).toJSNumber(),\n      12\n    );\n\n    range(sessionSalt.length).forEach((i) => {\n      counter[i] = counter[i] ^ sessionSalt[i];\n    });\n    return counter;\n  }\n\n  generateSrtpAuthTag(buf: Buffer, roc: number) {\n    this.srtpSessionAuth = createHmac(\"sha1\", this.srtpSessionAuthTag);\n    const rocRaw = Buffer.alloc(4);\n    rocRaw.writeUInt32BE(roc);\n\n    return this.srtpSessionAuth\n      .update(buf)\n      .update(rocRaw)\n      .digest()\n      .slice(0, 10);\n  }\n\n  generateSrtcpAuthTag(buf: Buffer) {\n    this.srtcpSessionAuth = createHmac(\"sha1\", this.srtcpSessionAuthTag);\n    return this.srtcpSessionAuth.update(buf).digest().slice(0, 10);\n  }\n\n  index(ssrc: number) {\n    const s = this.srtcpSSRCStates[ssrc];\n    if (!s) {\n      return 0;\n    }\n    return s.srtcpIndex;\n  }\n\n  setIndex(ssrc: number, index: number) {\n    const s = this.getSRTCPSSRCState(ssrc);\n    s.srtcpIndex = index % 0x7fffffff;\n  }\n}\n\nexport type SrtpSSRCState = {\n  ssrc: number;\n  rolloverCounter: number;\n  rolloverHasProcessed?: boolean;\n  lastSequenceNumber: number;\n};\n\nexport type SrtcpSSRCState = {\n  srtcpIndex: number;\n  ssrc: number;\n};\n\nconst MaxROCDisorder = 100;\nconst MaxSequenceNumber = 65535;\n"]}