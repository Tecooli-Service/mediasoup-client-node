{"version":3,"file":"trickle.test.js","sourceRoot":"","sources":["../../../tests/ice/trickle.test.ts"],"names":[],"mappings":";;;AAAA,mCAAuC;AACvC,oCAAgD;AAChD,2CAAwC;AAExC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,CAAC,sBAAsB,EAAE,GAAS,EAAE;QACtC,MAAM,CAAC,GAAG,IAAI,gBAAU,CAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,CAAC,GAAG,IAAI,gBAAU,CAAC,KAAK,CAAC,CAAC;QAEhC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3B,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;QACnC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;QAEnC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3B,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;QACnC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;QAEnC,4BAAoB,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAClC,4BAAoB,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAElC,IAAI,SAAS,GAAG,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAE,CAAC;QAC1C,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QACtC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEpC,SAAS,GAAG,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAE,CAAC;QACtC,MAAM,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,CAAC;QAElC,MAAM,kBAAkB,GAAG,CAAO,CAAa,EAAE,CAAa,EAAE,EAAE;YAChE,MAAM,aAAK,CAAC,GAAG,CAAC,CAAC;YACjB,KAAK,MAAM,SAAS,IAAI,CAAC,CAAC,eAAe,EAAE;gBACzC,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBAChC,MAAM,aAAK,CAAC,GAAG,CAAC,CAAC;aAClB;YACD,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAA,CAAC;QAEF,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,CAAC,CAAC,OAAO,EAAE;YACX,CAAC,CAAC,OAAO,EAAE;YACX,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;YACxB,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;SACzB,CAAC,CAAC;QAEH,qBAAqB;QACrB,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvC,qBAAqB;QACrB,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QAChB,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Connection } from \"../../src\";\nimport { assertCandidateTypes } from \"../utils\";\nimport { sleep } from \"../../src/utils\";\n\ndescribe(\"IceTrickleTest\", () => {\n  test(\"test_trickle_connect\", async () => {\n    const a = new Connection(true);\n    const b = new Connection(false);\n\n    await a.gatherCandidates();\n    b.remoteUsername = a.localUserName;\n    b.remotePassword = a.localPassword;\n\n    await b.gatherCandidates();\n    a.remoteUsername = b.localUserName;\n    a.remotePassword = b.localPassword;\n\n    assertCandidateTypes(a, [\"host\"]);\n    assertCandidateTypes(b, [\"host\"]);\n\n    let candidate = a.getDefaultCandidate(1)!;\n    expect(candidate).not.toBeUndefined();\n    expect(candidate.type).toBe(\"host\");\n\n    candidate = a.getDefaultCandidate(2)!;\n    expect(candidate).toBeUndefined();\n\n    const addCandidatesLater = async (a: Connection, b: Connection) => {\n      await sleep(100);\n      for (const candidate of b.localCandidates) {\n        a.addRemoteCandidate(candidate);\n        await sleep(100);\n      }\n      a.addRemoteCandidate(undefined);\n    };\n\n    await Promise.all([\n      a.connect(),\n      b.connect(),\n      addCandidatesLater(a, b),\n      addCandidatesLater(b, a),\n    ]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n});\n"]}