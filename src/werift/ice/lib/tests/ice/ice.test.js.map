{"version":3,"file":"ice.test.js","sourceRoot":"","sources":["../../../tests/ice/ice.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, CandidatePair, CandidatePairState } from \"../../src/ice\";\nimport { Protocol, Address } from \"../../src/types/model\";\nimport { Candidate } from \"../../src/candidate\";\nimport { inviteAccept, assertCandidateTypes } from \"../utils\";\nimport { sleep } from \"../../src/utils\";\nimport { Message } from \"../../src/stun/message\";\nimport { classes, methods } from \"../../src/stun/const\";\n\nclass ProtocolMock implements Protocol {\n  type = \"mock\";\n  responseAddr?: Address;\n  responseMessage?: string;\n  localCandidate = new Candidate(\n    \"some-foundation\",\n    1,\n    \"udp\",\n    1234,\n    \"1.2.3.4\",\n    1234,\n    \"host\"\n  );\n  sentMessage?: Message;\n  request = async () => {\n    return null as any;\n  };\n  sendStun = (message: Message) => {\n    this.sentMessage = message;\n  };\n  async connectionMade() {}\n  async sendData() {}\n}\n\ndescribe(\"ice\", () => {\n  test(\"test_peer_reflexive\", async () => {\n    const connection = new Connection(true);\n    connection.remotePassword = \"remote-password\";\n    connection.remoteUsername = \"remote-username\";\n    const protocol = new ProtocolMock() as any;\n\n    const request = new Message(methods.BINDING, classes.REQUEST);\n    request.attributes[\"PRIORITY\"] = 456789;\n\n    connection.checkIncoming(request, [\"2.3.4.5\", 2345], protocol);\n    expect(protocol.sentMessage).not.toBeNull();\n\n    // # check we have discovered a peer-reflexive candidate\n    expect(connection.remoteCandidates.length).toBe(1);\n    const candidate = connection.remoteCandidates[0];\n    expect(candidate.component).toBe(1);\n    expect(candidate.transport).toBe(\"udp\");\n    expect(candidate.priority).toBe(456789);\n    expect(candidate.host).toBe(\"2.3.4.5\");\n    expect(candidate.type).toBe(\"prflx\");\n    expect(candidate.generation).toBe(undefined);\n\n    // # check a new pair was formed\n    expect(connection.checkList.length).toBe(1);\n    const pair = connection.checkList[0];\n    expect(pair.protocol).toBe(protocol);\n    expect(pair.remoteCandidate).toBe(candidate);\n\n    // # check a triggered check was scheduled\n    expect(pair.handle).not.toBeNull();\n    protocol.responseAddr = [\"2.3.4.5\", 2345];\n    protocol.responseMessage = \"bad\";\n    await pair.handle?.promise;\n  });\n\n  test(\"test_request_with_invalid_method\", () => {\n    const connection = new Connection(true);\n    const protocol: any = new ProtocolMock();\n\n    const request = new Message(methods.ALLOCATE, classes.REQUEST);\n    connection.requestReceived(\n      request,\n      [\"2.3.4.5\", 2345],\n      protocol,\n      request.bytes\n    );\n    expect(protocol.sentMessage).not.toBeNull();\n    expect(protocol.sentMessage?.messageMethod).toBe(methods.ALLOCATE);\n    expect(protocol.sentMessage?.messageClass).toBe(classes.ERROR);\n    expect(protocol.sentMessage?.attributes[\"ERROR-CODE\"]).toEqual([\n      400,\n      \"Bad Request\",\n    ]);\n  });\n\n  test(\"test_response_with_invalid_address\", async () => {\n    const connection = new Connection(true);\n    connection.remotePassword = \"remote-password\";\n    connection.remoteUsername = \"remote-username\";\n\n    const protocol: any = new ProtocolMock();\n    protocol.responseAddr = [\"3.4.5.6\", 3456];\n    protocol.responseMessage = \"bad\";\n\n    const pair = new CandidatePair(\n      protocol,\n      new Candidate(\"some-foundation\", 1, \"udp\", 2345, \"2.3.4.5\", 2345, \"host\")\n    );\n\n    await connection.checkStart(pair);\n    expect(pair.state).toBe(CandidatePairState.FAILED);\n  });\n\n  test(\"test_connect\", async () => {\n    const a = new Connection(true, {});\n    const b = new Connection(false, {});\n\n    await inviteAccept(a, b);\n\n    assertCandidateTypes(a, [\"host\"]);\n    assertCandidateTypes(b, [\"host\"]);\n\n    let candidate = a.getDefaultCandidate(1);\n    expect(candidate).not.toBeUndefined();\n    expect(candidate?.type).toBe(\"host\");\n\n    candidate = a.getDefaultCandidate(2);\n    expect(candidate).toBeUndefined();\n\n    await Promise.all([a.connect(), b.connect()]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n\n  test(\n    \"test_connect_close\",\n    async (done) => {\n      const a = new Connection(true, {});\n      const b = new Connection(false, {});\n      await inviteAccept(a, b);\n\n      await b.close();\n\n      try {\n        await Promise.all([\n          a.connect(),\n          async () => {\n            await sleep(1000);\n            await a.close();\n          },\n        ]);\n      } catch (error) {\n        expect(true).toBe(true);\n        done();\n      }\n    },\n    1000 * 10\n  );\n\n  // test(\"test_connect_two_components\", async () => {\n  //   const a = new Connection(true, { components: 2 });\n  //   const b = new Connection(false, { components: 2 });\n\n  //   // # invite / accept\n  //   await inviteAccept(a, b);\n\n  //   // # we should only have host candidates\n  //   assertCandidateTypes(a, [\"host\"]);\n  //   assertCandidateTypes(b, [\"host\"]);\n\n  //   // # there should be a default candidate for component 1\n  //   let candidate = a.getDefaultCandidate(1);\n  //   expect(candidate).not.toBeUndefined();\n  //   expect(candidate?.type).toBe(\"host\");\n\n  //   // # there should be a default candidate for component 2\n  //   candidate = a.getDefaultCandidate(2);\n  //   expect(candidate).not.toBeUndefined();\n  //   expect(candidate?.type).toBe(\"host\");\n\n  //   // # connect\n  //   await Promise.all([a.connect(), b.connect()]);\n  //   expect(a._components).toEqual(new Set([1, 2]));\n  //   expect(b._components).toEqual(new Set([1, 2]));\n\n  //   // # send data a -> b (component 1)\n  //   await a.sendTo(Buffer.from(\"howdee\"), 1);\n  //   let [data, component] = await b.onData.asPromise();\n  //   expect(data).toEqual(Buffer.from(\"howdee\"));\n  //   expect(component).toBe(1);\n\n  //   // # send data b -> a (component 1)\n  //   await b.sendTo(Buffer.from(\"gotcha\"), 1);\n  //   [data, component] = await a.onData.asPromise();\n  //   expect(data).toEqual(Buffer.from(\"gotcha\"));\n  //   expect(component).toBe(1);\n\n  //   // # send data a -> b (component 2)\n  //   await a.sendTo(Buffer.from(\"howdee 2\"), 2);\n  //   [data, component] = await b.onData.asPromise();\n  //   expect(data.toString()).toEqual(Buffer.from(\"howdee 2\").toString());\n  //   expect(component).toBe(2);\n\n  //   // # send data b -> a (component 2)\n  //   await b.sendTo(Buffer.from(\"gotcha 2\"), 2);\n  //   [data, component] = await a.onData.asPromise();\n  //   expect(data.toString()).toEqual(Buffer.from(\"gotcha 2\").toString());\n  //   expect(component).toBe(2);\n\n  //   await a.close();\n  //   await b.close();\n  // });\n\n  // test(\"test_connect_two_components_vs_one_component\", async () => {\n  //   // \"\"\"\n  //   // It is possible that some of the local candidates won't get paired with\n  //   // remote candidates, and some of the remote candidates won't get paired\n  //   // with local candidates.  This can happen if one agent doesn't include\n  //   // candidates for the all of the components for a media stream.  If this\n  //   // happens, the number of components for that media stream is effectively\n  //   // reduced, and considered to be equal to the minimum across both agents\n  //   // of the maximum component ID provided by each agent across all\n  //   // components for the media stream.\n  //   // \"\"\"\n\n  //   const a = new Connection(true, { components: 2 });\n  //   const b = new Connection(false, { components: 1 });\n\n  //   // # invite / accept\n  //   await inviteAccept(a, b);\n  //   expect(a.localCandidates.length > 0).toBeTruthy();\n  //   assertCandidateTypes(a, [\"host\"]);\n\n  //   // # connect\n  //   await Promise.all([a.connect(), b.connect()]);\n  //   expect(a._components).toEqual(new Set([1]));\n  //   expect(b._components).toEqual(new Set([1]));\n\n  //   // # send data a -> b (component 1)\n  //   await a.sendTo(Buffer.from(\"howdee\"), 1);\n  //   let [data, component] = await b.onData.asPromise();\n  //   expect(data).toEqual(Buffer.from(\"howdee\"));\n  //   expect(component).toBe(1);\n\n  //   // # send data b -> a (component 1)\n  //   await b.sendTo(Buffer.from(\"gotcha\"), 1);\n  //   [data, component] = await a.onData.asPromise();\n  //   expect(data).toEqual(Buffer.from(\"gotcha\"));\n  //   expect(component).toBe(1);\n\n  //   // # close\n  //   await a.close();\n  //   await b.close();\n  // });\n\n  test(\"test_connect_ipv6\", async () => {\n    const a = new Connection(true, { useIpv4: false, useIpv6: true });\n    const b = new Connection(false, { useIpv4: false, useIpv6: true });\n\n    // # invite / accept\n    await inviteAccept(a, b);\n    assertCandidateTypes(a, [\"host\"]);\n\n    // # connect\n    await Promise.all([a.connect(), b.connect()]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n\n  test(\"test_connect_reverse_order\", async () => {\n    const a = new Connection(true);\n    const b = new Connection(false);\n\n    // # invite / accept\n    await inviteAccept(a, b);\n\n    // # introduce a delay so that B's checks complete before A's\n    await Promise.all([\n      new Promise<void>((r) =>\n        setTimeout(async () => {\n          await a.connect();\n          r();\n        }, 1000)\n      ),\n      b.connect(),\n    ]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n\n  test(\"test_connect_invalid_password\", async (done) => {\n    const a = new Connection(true);\n    const b = new Connection(false);\n\n    await a.gatherCandidates();\n    b.remoteCandidates = a.localCandidates;\n    b.remoteUsername = a.localUserName;\n    b.remotePassword = a.remotePassword;\n\n    await b.gatherCandidates();\n    a.remoteCandidates = b.localCandidates;\n    a.remoteUsername = b.localUserName;\n    a.remotePassword = \"wrong-password\";\n\n    try {\n      await Promise.all([a.connect(), b.connect()]);\n    } catch (error) {\n      expect(error.message).toBe(\"Remote username or password is missing\");\n      await a.close();\n      await b.close();\n      done();\n    }\n  });\n\n  test(\"test_connect_invalid_username\", async (done) => {\n    const a = new Connection(true);\n    const b = new Connection(false);\n\n    await a.gatherCandidates();\n    b.remoteCandidates = a.localCandidates;\n    b.remoteUsername = a.localUserName;\n    b.remotePassword = a.remotePassword;\n\n    await b.gatherCandidates();\n    a.remoteCandidates = b.localCandidates;\n    a.remoteUsername = \"wrong-username\";\n    a.remotePassword = b.localPassword;\n\n    try {\n      await Promise.all([a.connect(), b.connect()]);\n    } catch (error) {\n      expect(error.message).toBe(\"Remote username or password is missing\");\n      await a.close();\n      await b.close();\n      done();\n    }\n  });\n\n  test(\"test_connect_no_gather\", async (done) => {\n    // \"\"\"\n    // If local candidates gathering was not performed, connect fails.\n    // \"\"\"\n\n    const conn = new Connection(true);\n    conn.remoteCandidates = [\n      Candidate.fromSdp(\n        \"6815297761 1 udp 659136 1.2.3.4 31102 typ host generation 0\"\n      ),\n    ];\n    conn.remoteUsername = \"foo\";\n    conn.remotePassword = \"bar\";\n    try {\n      await conn.connect();\n    } catch (error) {\n      expect(error.message).toBe(\n        \"Local candidates gathering was not performed\"\n      );\n      await conn.close();\n      done();\n    }\n  });\n\n  test(\"test_connect_no_local_candidates\", async (done) => {\n    const conn = new Connection(true);\n\n    conn._localCandidatesEnd = true;\n    conn.remoteCandidates = [\n      Candidate.fromSdp(\n        \"6815297761 1 udp 659136 1.2.3.4 31102 typ host generation 0\"\n      ),\n    ];\n    conn.remoteUsername = \"foo\";\n    conn.remotePassword = \"bar\";\n    try {\n      await conn.connect();\n    } catch (error) {\n      expect(error.message).toBe(\"ICE negotiation failed\");\n      await conn.close();\n      done();\n    }\n  });\n\n  test(\"test_connect_no_remote_candidates\", async (done) => {\n    const conn = new Connection(true);\n\n    await conn.gatherCandidates();\n    conn.remoteCandidates = [];\n    conn.remoteUsername = \"foo\";\n    conn.remotePassword = \"bar\";\n    try {\n      await conn.connect();\n    } catch (error) {\n      expect(error.message).toBe(\"ICE negotiation failed\");\n      await conn.close();\n      done();\n    }\n  });\n\n  test(\"test_connect_no_remote_credentials\", async (done) => {\n    const conn = new Connection(true);\n\n    await conn.gatherCandidates();\n    conn.remoteCandidates = [\n      Candidate.fromSdp(\n        \"6815297761 1 udp 659136 1.2.3.4 31102 typ host generation 0\"\n      ),\n    ];\n    try {\n      await conn.connect();\n    } catch (error) {\n      expect(error.message).toBe(\"Remote username or password is missing\");\n      await conn.close();\n      done();\n    }\n  });\n\n  test(\n    \"test_connect_role_conflict_both_controlling\",\n    async () => {\n      const a = new Connection(true);\n      const b = new Connection(true);\n\n      a._tieBreaker = BigInt(1);\n      b._tieBreaker = BigInt(2);\n\n      await inviteAccept(a, b);\n\n      try {\n        await Promise.all([a.connect(), b.connect()]);\n      } catch (error) {}\n      expect(a.iceControlling).toBe(false);\n      expect(b.iceControlling).toBe(true);\n\n      await a.close();\n      await b.close();\n    },\n    1000 * 60 * 60\n  );\n\n  test(\n    \"test_connect_role_conflict_both_controlled\",\n    async () => {\n      const a = new Connection(false);\n      const b = new Connection(false);\n\n      a._tieBreaker = BigInt(1);\n      b._tieBreaker = BigInt(2);\n\n      await inviteAccept(a, b);\n\n      await Promise.all([a.connect(), b.connect()]);\n      expect(a.iceControlling).toBe(false);\n      expect(b.iceControlling).toBe(true);\n\n      await a.close();\n      await b.close();\n    },\n    1000 * 60 * 60\n  );\n\n  test(\"test_connect_with_stun_server\", async () => {\n    const a = new Connection(true, {\n      stunServer: [\"stun.l.google.com\", 19302],\n    });\n    const b = new Connection(false, {\n      stunServer: [\"stun.l.google.com\", 19302],\n    });\n\n    // # invite / accept\n    await inviteAccept(a, b);\n\n    // # we would have both host and server-reflexive candidates\n    assertCandidateTypes(a, [\"host\", \"srflx\"]);\n    assertCandidateTypes(b, [\"host\", \"srflx\"]);\n\n    const candidate = a.getDefaultCandidate(1)!;\n    expect(candidate).not.toBeUndefined();\n    expect(candidate.type).toBe(\"srflx\");\n    expect(candidate.relatedAddress).not.toBeUndefined();\n    expect(candidate.relatedPort).not.toBeUndefined();\n\n    // # connect\n    await Promise.all([a.connect(), b.connect()]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n\n  test(\n    \"test_connect_with_stun_server_dns_lookup_error\",\n    async () => {\n      const a = new Connection(true, {\n        stunServer: [\"invalid\", 19302],\n      });\n      const b = new Connection(false, {});\n\n      // # invite / accept\n      await inviteAccept(a, b);\n\n      assertCandidateTypes(a, [\"host\"]);\n      assertCandidateTypes(b, [\"host\"]);\n\n      // # connect\n      await Promise.all([a.connect(), b.connect()]);\n\n      // # send data a -> b\n      await a.send(Buffer.from(\"howdee\"));\n      let [data] = await b.onData.asPromise();\n      expect(data.toString()).toBe(\"howdee\");\n\n      // # send data b -> a\n      await b.send(Buffer.from(\"gotcha\"));\n      [data] = await a.onData.asPromise();\n      expect(data.toString()).toBe(\"gotcha\");\n\n      await a.close();\n      await b.close();\n    },\n    1000 * 60\n  );\n\n  test(\n    \"test_connect_with_stun_server_ipv6\",\n    async () => {\n      const a = new Connection(true, {\n        stunServer: [\"stun.l.google.com\", 19302],\n        useIpv4: false,\n        useIpv6: true,\n      });\n      const b = new Connection(false, {\n        stunServer: [\"stun.l.google.com\", 19302],\n        useIpv4: false,\n        useIpv6: true,\n      });\n\n      // # invite / accept\n      await inviteAccept(a, b);\n\n      // # we would have both host and server-reflexive candidates\n      expect(a.localCandidates.length > 0).toBeTruthy();\n      a.localCandidates.forEach((v) => expect(v.type).toBe(\"host\"));\n\n      // # connect\n      await Promise.all([a.connect(), b.connect()]);\n\n      // # send data a -> b\n      await a.send(Buffer.from(\"howdee\"));\n      let [data] = await b.onData.asPromise();\n      expect(data.toString()).toBe(\"howdee\");\n\n      // # send data b -> a\n      await b.send(Buffer.from(\"gotcha\"));\n      [data] = await a.onData.asPromise();\n      expect(data.toString()).toBe(\"gotcha\");\n\n      await a.close();\n      await b.close();\n    },\n    60 * 1000\n  );\n\n  test(\"test_connect_to_ice_lite\", async () => {\n    const a = new Connection(true, {});\n    a.remoteIsLite = true;\n    const b = new Connection(false, {});\n\n    // # invite / accept\n    await inviteAccept(a, b);\n\n    // # we would have both host and server-reflexive candidates\n    assertCandidateTypes(a, [\"host\"]);\n    assertCandidateTypes(b, [\"host\"]);\n\n    const candidate = a.getDefaultCandidate(1)!;\n    expect(candidate).not.toBeUndefined();\n    expect(candidate.type).toBe(\"host\");\n\n    expect(a.getDefaultCandidate(2)).toBeUndefined();\n\n    // # connect\n    await Promise.all([a.connect(), b.connect()]);\n\n    // # send data a -> b\n    await a.send(Buffer.from(\"howdee\"));\n    let [data] = await b.onData.asPromise();\n    expect(data.toString()).toBe(\"howdee\");\n\n    // # send data b -> a\n    await b.send(Buffer.from(\"gotcha\"));\n    [data] = await a.onData.asPromise();\n    expect(data.toString()).toBe(\"gotcha\");\n\n    await a.close();\n    await b.close();\n  });\n});\n"]}