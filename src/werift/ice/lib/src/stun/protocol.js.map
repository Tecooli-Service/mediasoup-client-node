{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../src/stun/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport * as dgram from \"dgram\";\nimport { Event } from \"rx.mini\";\nimport { Candidate } from \"../candidate\";\nimport { Connection } from \"../ice\";\nimport { Address, Protocol } from \"../types/model\";\nimport { classes } from \"./const\";\nimport { Message, parseMessage } from \"./message\";\nimport { Transaction } from \"./transaction\";\n\nconst log = debug(\"werift/ice/stun/protocol\");\n\nexport class StunProtocol implements Protocol {\n  readonly type = \"stun\";\n  socket = dgram.createSocket(\"udp4\");\n  transactions: { [key: string]: Transaction } = {};\n  get transactionsKeys() {\n    return Object.keys(this.transactions);\n  }\n  localCandidate!: Candidate;\n  sentMessage?: Message;\n  localAddress?: string;\n\n  private readonly closed = new Event();\n\n  constructor(public receiver: Connection) {}\n\n  connectionLost() {\n    this.closed.execute();\n    this.closed.complete();\n  }\n\n  connectionMade = async (useIpv4: boolean) => {\n    if (!useIpv4) {\n      this.socket = dgram.createSocket(\"udp6\");\n    }\n    this.socket.bind();\n    await new Promise((r) => this.socket.once(\"listening\", r));\n    this.socket.on(\"message\", (data, info) => {\n      if (info.family === \"IPv6\") {\n        [info.address] = info.address.split(\"%\"); // example fe80::1d3a:8751:4ffd:eb80%wlp82s0\n      }\n      this.datagramReceived(data, [info.address, info.port]);\n    });\n  };\n\n  private datagramReceived(data: Buffer, addr: Address) {\n    const message = parseMessage(data);\n    if (!message) {\n      this.receiver.dataReceived(data, this.localCandidate.component);\n      return;\n    }\n    // log(\"parseMessage\", addr, message);\n    if (\n      (message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR) &&\n      this.transactionsKeys.includes(message.transactionIdHex)\n    ) {\n      const transaction = this.transactions[message.transactionIdHex];\n      transaction.responseReceived(message, addr);\n    } else if (message.messageClass === classes.REQUEST) {\n      this.receiver.requestReceived(message, addr, this, data);\n    }\n  }\n\n  get getExtraInfo(): [string, number] {\n    const { address: host, port } = this.socket.address();\n    return [host, port];\n  }\n\n  sendStun(message: Message, addr: Address) {\n    const [host, port] = addr;\n    const data = message.bytes;\n    try {\n      this.socket.send(data, port, host, (error, size) => {\n        if (error) {\n          log(\"sendStun error\", port, host, size, error);\n        }\n      });\n    } catch (error) {}\n  }\n\n  sendData = (data: Buffer, addr: Address) =>\n    new Promise<void>((r) => {\n      const [host, port] = addr;\n      this.socket.send(data, port, host, (error, size) => {\n        if (error) {\n          log(\"sendData error\", port, host, size, error);\n        }\n        r();\n      });\n    });\n\n  async request(\n    request: Message,\n    addr: Address,\n    integrityKey?: Buffer,\n    retransmissions?: number\n  ) {\n    // \"\"\"\n    // Execute a STUN transaction and return the response.\n    // \"\"\"\n    if (this.transactionsKeys.includes(request.transactionIdHex))\n      throw new Error(\"already request ed\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction: Transaction = new Transaction(\n      request,\n      addr,\n      this,\n      retransmissions\n    );\n    transaction.integrityKey = integrityKey;\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async close() {\n    await new Promise<void>((r) => {\n      this.socket.once(\"close\", r);\n      try {\n        this.socket.close();\n      } catch (error) {\n        r();\n      }\n    });\n  }\n}\n"]}