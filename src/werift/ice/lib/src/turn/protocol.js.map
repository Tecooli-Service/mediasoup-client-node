{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../src/turn/protocol.ts"],"names":[],"mappings":";;;;AAAA,mCAAoC;AACpC,0DAA0B;AAC1B,iCAAqC;AACrC,mCAAgC;AAChC,wEAAuC;AACvC,8DAA4B;AAI5B,yCAAiD;AACjD,6CAAwD;AACxD,qDAAkD;AAElD,oCAAsE;AAEtE,MAAM,GAAG,GAAG,eAAK,CAAC,0BAA0B,CAAC,CAAC;AAE9C,MAAM,aAAa,GAAG,UAAU,CAAC;AACjC,MAAM,aAAa,GAAG,UAAU,CAAC;AAEjC,MAAM,aAAa;IAKjB,YAAmB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJ1B,SAAI,GAAG,MAAM,CAAC;QAQf,qBAAgB,GAAG,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE;;YACzD,MAAM,OAAO,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAA,IAAI,CAAC,QAAQ,0CAAE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBACjE,OAAO;aACR;YAED,IACE,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,MAAK,eAAO,CAAC,QAAQ;gBACzC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,MAAK,eAAO,CAAC,KAAK,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAChD;gBACA,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBACrE,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAC7C;iBAAM,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,MAAK,eAAO,CAAC,OAAO,EAAE;gBACpD,MAAA,IAAI,CAAC,QAAQ,0CAAE,eAAe,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC3D;QACH,CAAC,CAAC;QApBA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAClD,CAAC;IAqBK,OAAO,CAAC,OAAgB,EAAE,IAAa,EAAE,YAAqB;;YAClE,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;YAE3B,IAAI,YAAY,EAAE;gBAChB,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;gBAC1C,OAAO,CAAC,cAAc,EAAE,CAAC;aAC1B;YAED,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACzD,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,WAAW,CAAC;YAE/D,IAAI;gBACF,OAAO,MAAM,WAAW,CAAC,GAAG,EAAE,CAAC;aAChC;oBAAS;gBACR,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;aACzD;QACH,CAAC;KAAA;IACK,cAAc;sEAAI,CAAC;KAAA;IACnB,QAAQ,CAAC,IAAY,EAAE,IAAa;;YACxC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;KAAA;IACK,QAAQ,CAAC,OAAgB,EAAE,IAAa;;YAC5C,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;KAAA;CACF;AAED,MAAM,UAAU;IAiBd,YACS,MAAe,EACf,QAAgB,EAChB,QAAgB,EAChB,QAAgB,EAChB,SAAoB;QAJpB,WAAM,GAAN,MAAM,CAAS;QACf,aAAQ,GAAR,QAAQ,CAAQ;QAChB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,cAAS,GAAT,SAAS,CAAW;QArB7B,SAAI,GAAG,YAAY,CAAC;QACpB,WAAM,GAAG,IAAI,iBAAK,EAAqB,CAAC;QACxC,iBAAY,GAAqC,EAAE,CAAC;QAOpD,kBAAa,GAAG,MAAM,CAAC;QACvB,kBAAa,GAA8B,EAAE,CAAC;QAC9C,kBAAa,GAA+B,EAAE,CAAC;QAG/C,uBAAkB,GAA0C,GAAG,EAAE,GAAE,CAAC,CAAC;QAmGrE,YAAO,GAAG,GAAG,EAAE,CACb,IAAI,sBAAW,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE;YACvC,IAAI,GAAG,GAAG,IAAI,CAAC;YACf,QAAQ,CAAC,GAAG,EAAE;gBACZ,GAAG,GAAG,KAAK,CAAC;gBACZ,CAAC,CAAC,QAAQ,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,OAAO,GAAG,EAAE;gBACV,wBAAwB;gBACxB,MAAM,aAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;gBAE5C,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,eAAO,CAAC,OAAO,EAAE,eAAO,CAAC,OAAO,CAAC,CAAC;gBAC9D,OAAO,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAE5C,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK;gBAC/D,WAAW;gBACX,GAAG,CACJ,CAAC;aACH;QACH,CAAC,CAAA,CAAC,CAAC;IA/GF,CAAC;IAEE,cAAc;;YAClB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;gBACrC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC;QACJ,CAAC;KAAA;IAEO,iBAAiB,CAAC,IAAY;QACpC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,eAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEjE,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAE7C,IAAI,QAAQ,EAAE;YACZ,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC5C;IACH,CAAC;IAEO,iBAAiB,CAAC,IAAY,EAAE,IAAa;QACnD,IAAI;YACF,MAAM,OAAO,GAAG,sBAAY,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAClD,IACE,OAAO,CAAC,YAAY,KAAK,eAAO,CAAC,QAAQ;gBACzC,OAAO,CAAC,YAAY,KAAK,eAAO,CAAC,KAAK,EACtC;gBACA,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBAChE,IAAI,WAAW;oBAAE,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAC9D;iBAAM,IAAI,OAAO,CAAC,YAAY,KAAK,eAAO,CAAC,OAAO,EAAE;gBACnD,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACrC;YAED,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;gBAC3B,MAAM,GAAG,GAAW,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;gBAC5C,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aACpC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,gBAAgB,CAAC,IAAY,EAAE,IAAa;QAClD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC7B,OAAO;SACR;QAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAEK,OAAO;;YACX,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,eAAO,CAAC,QAAQ,EAAE,eAAO,CAAC,OAAO,CAAC,CAAC;YAC/D,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/C,OAAO,CAAC,UAAU,CAAC,qBAAqB,CAAC,GAAG,aAAa,CAAC;YAE1D,IAAI,QAAiB,CAAC;YACtB,IAAI;gBACF,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aAC1E;YAAC,OAAO,KAAK,EAAE;gBACd,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpB,QAAQ,GAAI,KAA2B,CAAC,QAAQ,CAAC;gBACjD,IAAI,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBAChD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;oBACvC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;oBACvC,IAAI,CAAC,YAAY,GAAG,gBAAgB,CAClC,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAM,EACX,IAAI,CAAC,QAAQ,CACd,CAAC;oBACF,OAAO,CAAC,aAAa,GAAG,2BAAmB,EAAE,CAAC;oBAE9C,IAAI;wBACF,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CAC7B,OAAO,EACP,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,YAAY,CAClB,CAAC;qBACH;oBAAC,OAAO,KAAK,EAAE;wBACd,GAAG,CAAC,KAAK,CAAC,CAAC;wBACX,WAAW;qBACZ;iBACF;aACF;YAED,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;YACjE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;YAE/D,IAAI,CAAC,aAAa,GAAG,cAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,CAAC;KAAA;IAwBK,OAAO,CACX,OAAgB,EAChB,IAAa,EACb,YAAqB;;YAErB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;YAE1E,IAAI,YAAY,EAAE;gBAChB,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;gBAE1C,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC/C,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gBAEzC,OAAO,CAAC,cAAc,EAAE,CAAC;aAC1B;YAED,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACzD,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;YACxC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,WAAW,CAAC;YAE1D,IAAI;gBACF,OAAO,MAAM,WAAW,CAAC,GAAG,EAAE,CAAC;aAChC;oBAAS;gBACR,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;aACpD;QACH,CAAC;KAAA;IAEK,QAAQ,CAAC,IAAY,EAAE,IAAa;;YACxC,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,OAAO,CAAC;gBAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;gBAEnC,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACtC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;aACtB;YAED,MAAM,MAAM,GAAG,eAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAE1D,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,EAC1C,IAAI,CAAC,MAAM,CACZ,CAAC;QACJ,CAAC;KAAA;IAEa,WAAW,CAAC,aAAqB,EAAE,IAAa;;YAC5D,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,eAAO,CAAC,YAAY,EAAE,eAAO,CAAC,OAAO,CAAC,CAAC;YACnE,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,aAAa,CAAC;YACrD,OAAO,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;YAC9C,IAAI;gBACF,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CACnC,OAAO,EACP,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,YAAY,CAClB,CAAC;gBACF,IAAI,QAAQ,CAAC,aAAa,KAAK,eAAO,CAAC,YAAY;oBAAE,MAAM,IAAI,KAAK,EAAE,CAAC;aACxE;YAAC,OAAO,KAAK,EAAE;gBACd,GAAG,CAAC,KAAK,CAAC,CAAC;gBACX,WAAW;aACZ;QACH,CAAC;KAAA;IAED,QAAQ,CAAC,OAAgB,EAAE,IAAa;QACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;CACF;AAED,SAAsB,kBAAkB,CACtC,UAAmB,EACnB,QAAgB,EAChB,QAAgB,EAChB,QAAQ,GAAG,GAAG,EACd,GAAG,GAAG,KAAK,EACX,SAAS,GAAG,KAAK;;QAEjB,MAAM,UAAU,GAAG,IAAI,UAAU,CAC/B,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,IAAI,YAAY,EAAE,CACnB,CAAC;QAEF,MAAM,UAAU,CAAC,cAAc,EAAE,CAAC;QAClC,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;QAC3B,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC;QAEpD,OAAO,aAAa,CAAC;IACvB,CAAC;CAAA;AArBD,gDAqBC;AAED,SAAS,gBAAgB,CAAC,QAAgB,EAAE,KAAa,EAAE,QAAgB;IACzE,OAAO,mBAAU,CAAC,KAAK,CAAC;SACrB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1D,MAAM,EAAE,CAAC;AACd,CAAC;AAOD,MAAM,YAAY;IAIhB;QAHA,WAAM,GAAG,oBAAY,CAAC,MAAM,CAAC,CAAC;QAC9B,WAAM,GAA0C,GAAG,EAAE,GAAE,CAAC,CAAC;QAUzD,SAAI,GAAG,CAAC,IAAY,EAAE,IAAa,EAAE,EAAE,CACrC,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE,CACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE;YACjD,IAAI,KAAK,EAAE;gBACT,GAAG,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC/B;YACD,CAAC,EAAE,CAAC;QACN,CAAC,CAAC,CACH,CAAC;QAfF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;CAWF;AAED,SAAS,aAAa,CAAC,IAAY;IACjC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC;AAClC,CAAC","sourcesContent":["import { createHash } from \"crypto\";\nimport debug from \"debug\";\nimport { createSocket } from \"dgram\";\nimport { jspack } from \"jspack\";\nimport PCancelable from \"p-cancelable\";\nimport Event from \"rx.mini\";\nimport { Candidate } from \"../candidate\";\nimport { TransactionFailed } from \"../exceptions\";\nimport { Connection } from \"../ice\";\nimport { classes, methods } from \"../stun/const\";\nimport { Message, parseMessage } from \"../stun/message\";\nimport { Transaction } from \"../stun/transaction\";\nimport { Address, Protocol } from \"../types/model\";\nimport { future, Future, randomTransactionId, sleep } from \"../utils\";\n\nconst log = debug(\"werift/ice/turn/protocol\");\n\nconst TCP_TRANSPORT = 0x06000000;\nconst UDP_TRANSPORT = 0x11000000;\n\nclass TurnTransport implements Protocol {\n  readonly type = \"turn\";\n  localCandidate!: Candidate;\n  receiver?: Connection;\n\n  constructor(public turn: TurnClient) {\n    turn.onDatagramReceived = this.datagramReceived;\n  }\n\n  private datagramReceived = (data: Buffer, addr: Address) => {\n    const message = parseMessage(data);\n    if (!message) {\n      this.receiver?.dataReceived(data, this.localCandidate.component);\n      return;\n    }\n\n    if (\n      (message?.messageClass === classes.RESPONSE ||\n        message?.messageClass === classes.ERROR) &&\n      this.turn.transactions[message.transactionIdHex]\n    ) {\n      const transaction = this.turn.transactions[message.transactionIdHex];\n      transaction.responseReceived(message, addr);\n    } else if (message?.messageClass === classes.REQUEST) {\n      this.receiver?.requestReceived(message, addr, this, data);\n    }\n  };\n\n  async request(request: Message, addr: Address, integrityKey?: Buffer) {\n    if (this.turn.transactions[request.transactionIdHex])\n      throw new Error(\"exist\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    transaction.integrityKey = integrityKey;\n    this.turn.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.turn.transactions[request.transactionIdHex];\n    }\n  }\n  async connectionMade() {}\n  async sendData(data: Buffer, addr: Address) {\n    await this.turn.sendData(data, addr);\n  }\n  async sendStun(message: Message, addr: Address) {\n    await this.turn.sendData(message.bytes, addr);\n  }\n}\n\nclass TurnClient implements Protocol {\n  type = \"inner_turn\";\n  onData = new Event<[Buffer, Address]>();\n  transactions: { [hexId: string]: Transaction } = {};\n  integrityKey?: Buffer;\n  nonce?: Buffer;\n  realm?: string;\n  relayedAddress!: Address;\n  mappedAddress!: Address;\n  refreshHandle?: Future;\n  channelNumber = 0x4000;\n  channelByAddr: { [key: string]: number } = {};\n  addrByChannel: { [key: number]: Address } = {};\n  localCandidate!: Candidate;\n\n  onDatagramReceived: (data: Buffer, addr: Address) => void = () => {};\n\n  constructor(\n    public server: Address,\n    public username: string,\n    public password: string,\n    public lifetime: number,\n    public transport: Transport\n  ) {}\n\n  async connectionMade() {\n    this.transport.onData = (data, addr) => {\n      this.datagramReceived(data, addr);\n    };\n  }\n\n  private handleChannelData(data: Buffer) {\n    const [channel, length] = jspack.Unpack(\"!HH\", data.slice(0, 4));\n\n    const peerAddr = this.addrByChannel[channel];\n\n    if (peerAddr) {\n      const payload = data.slice(4, 4 + length);\n      this.onDatagramReceived(payload, peerAddr);\n    }\n  }\n\n  private handleSTUNMessage(data: Buffer, addr: Address) {\n    try {\n      const message = parseMessage(data);\n      if (!message) throw new Error(\"not stun message\");\n      if (\n        message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR\n      ) {\n        const transaction = this.transactions[message.transactionIdHex];\n        if (transaction) transaction.responseReceived(message, addr);\n      } else if (message.messageClass === classes.REQUEST) {\n        this.onDatagramReceived(data, addr);\n      }\n\n      if (message.attributes.DATA) {\n        const buf: Buffer = message.attributes.DATA;\n        this.onDatagramReceived(buf, addr);\n      }\n    } catch (error) {\n      log(\"parse error\", data.toString());\n    }\n  }\n\n  private datagramReceived(data: Buffer, addr: Address) {\n    if (data.length >= 4 && isChannelData(data)) {\n      this.handleChannelData(data);\n      return;\n    }\n\n    this.handleSTUNMessage(data, addr);\n  }\n\n  async connect() {\n    const request = new Message(methods.ALLOCATE, classes.REQUEST);\n    request.attributes[\"LIFETIME\"] = this.lifetime;\n    request.attributes[\"REQUESTED-TRANSPORT\"] = UDP_TRANSPORT;\n\n    let response: Message;\n    try {\n      [response] = await this.request(request, this.server, this.integrityKey);\n    } catch (error) {\n      log(\"error\", error);\n      response = (error as TransactionFailed).response;\n      if (response.attributes[\"ERROR-CODE\"][0] === 401) {\n        this.nonce = response.attributes.NONCE;\n        this.realm = response.attributes.REALM;\n        this.integrityKey = makeIntegrityKey(\n          this.username,\n          this.realm!,\n          this.password\n        );\n        request.transactionId = randomTransactionId();\n\n        try {\n          [response] = await this.request(\n            request,\n            this.server,\n            this.integrityKey\n          );\n        } catch (error) {\n          log(error);\n          // todo fix\n        }\n      }\n    }\n\n    this.relayedAddress = response.attributes[\"XOR-RELAYED-ADDRESS\"];\n    this.mappedAddress = response.attributes[\"XOR-MAPPED-ADDRESS\"];\n\n    this.refreshHandle = future(this.refresh());\n  }\n\n  refresh = () =>\n    new PCancelable(async (r, f, onCancel) => {\n      let run = true;\n      onCancel(() => {\n        run = false;\n        f(\"cancel\");\n      });\n\n      while (run) {\n        // refresh before expire\n        await sleep((5 / 6) * this.lifetime * 1000);\n\n        const request = new Message(methods.REFRESH, classes.REQUEST);\n        request.attributes.LIFETIME = this.lifetime;\n\n        await this.request(request, this.server, this.integrityKey).catch(\n          // todo fix\n          log\n        );\n      }\n    });\n\n  async request(\n    request: Message,\n    addr: Address,\n    integrityKey?: Buffer\n  ): Promise<[Message, Address]> {\n    if (this.transactions[request.transactionIdHex]) throw new Error(\"exist\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n\n      request.attributes[\"USERNAME\"] = this.username;\n      request.attributes[\"REALM\"] = this.realm;\n      request.attributes[\"NONCE\"] = this.nonce;\n\n      request.addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    transaction.integrityKey = integrityKey;\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async sendData(data: Buffer, addr: Address) {\n    let channel = this.channelByAddr[addr.join()];\n    if (!channel) {\n      channel = this.channelNumber++;\n      this.channelByAddr[addr.join()] = channel;\n      this.addrByChannel[channel] = addr;\n\n      await this.channelBind(channel, addr);\n      log(\"bind\", channel);\n    }\n\n    const header = jspack.Pack(\"!HH\", [channel, data.length]);\n\n    this.transport.send(\n      Buffer.concat([Buffer.from(header), data]),\n      this.server\n    );\n  }\n\n  private async channelBind(channelNumber: number, addr: Address) {\n    const request = new Message(methods.CHANNEL_BIND, classes.REQUEST);\n    request.attributes[\"CHANNEL-NUMBER\"] = channelNumber;\n    request.attributes[\"XOR-PEER-ADDRESS\"] = addr;\n    try {\n      const [response] = await this.request(\n        request,\n        this.server,\n        this.integrityKey\n      );\n      if (response.messageMethod !== methods.CHANNEL_BIND) throw new Error();\n    } catch (error) {\n      log(error);\n      // todo fix\n    }\n  }\n\n  sendStun(message: Message, addr: Address) {\n    this.transport.send(message.bytes, addr);\n  }\n}\n\nexport async function createTurnEndpoint(\n  serverAddr: Address,\n  username: string,\n  password: string,\n  lifetime = 600,\n  ssl = false,\n  transport = \"udp\"\n) {\n  const turnClient = new TurnClient(\n    serverAddr,\n    username,\n    password,\n    lifetime,\n    new UdpTransport()\n  );\n\n  await turnClient.connectionMade();\n  await turnClient.connect();\n  const turnTransport = new TurnTransport(turnClient);\n\n  return turnTransport;\n}\n\nfunction makeIntegrityKey(username: string, realm: string, password: string) {\n  return createHash(\"md5\")\n    .update(Buffer.from([username, realm, password].join(\":\")))\n    .digest();\n}\n\ninterface Transport {\n  onData: (data: Buffer, addr: Address) => void;\n  send: (data: Buffer, addr: Address) => Promise<void>;\n}\n\nclass UdpTransport implements Transport {\n  socket = createSocket(\"udp4\");\n  onData: (data: Buffer, addr: Address) => void = () => {};\n  _address?: Address;\n  constructor() {\n    this.socket.bind();\n    this.socket.on(\"message\", (data, rInfo) => {\n      this._address = [rInfo.address, rInfo.port];\n      this.onData(data, this._address);\n    });\n  }\n\n  send = (data: Buffer, addr: Address) =>\n    new Promise<void>((r) =>\n      this.socket.send(data, addr[1], addr[0], (error) => {\n        if (error) {\n          log(\"send error\", addr, data);\n        }\n        r();\n      })\n    );\n}\n\nfunction isChannelData(data: Buffer) {\n  return (data[0] & 0xc0) == 0x40;\n}\n"]}