{"version":3,"file":"receive.js","sourceRoot":"","sources":["../../src/record/receive.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAG1B,sDAAmD;AACnD,mCAAsC;AACtC,iDAAyD;AACzD,mDAAoD;AAEpD,MAAM,GAAG,GAAG,eAAK,CAAC,4BAA4B,CAAC,CAAC;AAEzC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE;IAC1C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,MAAM,OAAO,GAAoB,EAAE,CAAC;IACpC,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,EAAE;QAC1B,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QACrD,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC;YAAE,MAAM;QACvD,MAAM,MAAM,GAAG,yBAAa,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAErB,KAAK,IAAI,EAAE,GAAG,cAAc,CAAC;KAC9B;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAbW,QAAA,WAAW,eAatB;AAEK,MAAM,cAAc,GAAG,CAAC,IAAiB,EAAE,MAAqB,EAAE,EAAE,CAAC,CAC1E,KAAoB,EACpB,EAAE;IACF,MAAM,WAAW,GAAG,KAAK,CAAC,iBAAiB,CAAC,WAAW,CAAC;IAExD,QAAQ,WAAW,EAAE;QACnB,KAAK,mBAAW,CAAC,gBAAgB,CAAC,CAAC;YACjC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAC1B,OAAO;gBACL,IAAI,EAAE,mBAAW,CAAC,gBAAgB;gBAClC,IAAI,EAAE,SAAS;aAChB,CAAC;SACH;QACD,KAAK,mBAAW,CAAC,SAAS,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC;YACzB,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,GAAG,CAAC,EAAE;gBACrC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBACzB,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aACnC;YACD,OAAO;gBACL,IAAI,EAAE,mBAAW,CAAC,SAAS;gBAC3B,IAAI,EAAE,8BAAmB,CAAC,WAAW,CAAC,GAAG,CAAC;aAC3C,CAAC;SACH;QACD,KAAK,mBAAW,CAAC,eAAe,CAAC,CAAC;YAChC,OAAO;gBACL,IAAI,EAAE,mBAAW,CAAC,eAAe;gBACjC,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;aAClC,CAAC;SACH;QACD,KAAK,mBAAW,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,KAAK,GAAG,aAAK,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAChD,GAAG,CAAC,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9D,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAC3D;QACD,OAAO,CAAC,CAAC;YACP,OAAO,EAAE,IAAI,EAAE,mBAAW,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;SACrD;KACF;AACH,CAAC,CAAC;AAvCW,QAAA,cAAc,kBAuCzB","sourcesContent":["import debug from \"debug\";\nimport { CipherContext } from \"../context/cipher\";\nimport { DtlsContext } from \"../context/dtls\";\nimport { Alert } from \"../handshake/message/alert\";\nimport { ContentType } from \"./const\";\nimport { FragmentedHandshake } from \"./message/fragment\";\nimport { DtlsPlaintext } from \"./message/plaintext\";\n\nconst log = debug(\"werift/dtls/record/receive\");\n\nexport const parsePacket = (data: Buffer) => {\n  let start = 0;\n  const packets: DtlsPlaintext[] = [];\n  while (data.length > start) {\n    const fragmentLength = data.readUInt16BE(start + 11);\n    if (data.length < start + (12 + fragmentLength)) break;\n    const packet = DtlsPlaintext.deSerialize(data.slice(start));\n    packets.push(packet);\n\n    start += 13 + fragmentLength;\n  }\n\n  return packets;\n};\n\nexport const parsePlainText = (dtls: DtlsContext, cipher: CipherContext) => (\n  plain: DtlsPlaintext\n) => {\n  const contentType = plain.recordLayerHeader.contentType;\n\n  switch (contentType) {\n    case ContentType.changeCipherSpec: {\n      log(\"change cipher spec\");\n      return {\n        type: ContentType.changeCipherSpec,\n        data: undefined,\n      };\n    }\n    case ContentType.handshake: {\n      let raw = plain.fragment;\n      if (plain.recordLayerHeader.epoch > 0) {\n        log(\"decrypt handshake\");\n        raw = cipher.decryptPacket(plain);\n      }\n      return {\n        type: ContentType.handshake,\n        data: FragmentedHandshake.deSerialize(raw),\n      };\n    }\n    case ContentType.applicationData: {\n      return {\n        type: ContentType.applicationData,\n        data: cipher.decryptPacket(plain),\n      };\n    }\n    case ContentType.alert: {\n      const alert = Alert.deSerialize(plain.fragment);\n      log(\"ContentType.alert\", alert, dtls.flight, dtls.lastFlight);\n      if (alert.level > 1) throw new Error(\"alert fatal error\");\n    }\n    default: {\n      return { type: ContentType.alert, data: undefined };\n    }\n  }\n};\n"]}