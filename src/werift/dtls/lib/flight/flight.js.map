{"version":3,"file":"flight.js","sourceRoot":"","sources":["../../src/flight/flight.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { DtlsContext } from \"../context/dtls\";\nimport { TransportContext } from \"../context/transport\";\nimport { sleep } from \"../helper\";\nimport { createFragments, createPlaintext } from \"../record/builder\";\nimport { ContentType } from \"../record/const\";\nimport { Handshake } from \"../typings/domain\";\n\nconst log = debug(\"werift/dtls/flight\");\n\nconst flightTypes = [\"PREPARING\", \"SENDING\", \"WAITING\", \"FINISHED\"] as const;\n\ntype FlightType = typeof flightTypes[number];\n\nexport abstract class Flight {\n  state: FlightType = \"PREPARING\";\n  private buffer: Buffer[] = [];\n\n  constructor(\n    private transport: TransportContext,\n    public dtls: DtlsContext,\n    private flight: number,\n    private nextFlight?: number\n  ) {}\n\n  protected createPacket(handshakes: Handshake[]) {\n    const fragments = createFragments(this.dtls)(handshakes);\n    this.dtls.bufferHandshakeCache(fragments, true, this.flight);\n    const packets = createPlaintext(this.dtls)(\n      fragments.map((fragment) => ({\n        type: ContentType.handshake,\n        fragment: fragment.serialize(),\n      })),\n      ++this.dtls.recordSequenceNumber\n    );\n    return packets;\n  }\n\n  protected transmit(buf: Buffer[]) {\n    this.buffer = buf;\n    this.retransmit();\n  }\n\n  protected send = (buf: Buffer[]) =>\n    Promise.all(buf.map((v) => this.transport.send(v)));\n\n  private setState(state: FlightType) {\n    this.state = state;\n  }\n\n  retransmitCount = 0;\n  private async retransmit() {\n    this.setState(\"SENDING\");\n    this.send(this.buffer);\n    this.setState(\"WAITING\");\n\n    if (this.nextFlight === undefined) {\n      this.retransmitCount = 0;\n      this.setState(\"FINISHED\");\n      return;\n    }\n\n    await sleep(1000);\n    if (this.dtls.flight >= this.nextFlight) {\n      this.retransmitCount = 0;\n      this.setState(\"FINISHED\");\n      return;\n    } else {\n      if (this.retransmitCount++ > 10) throw new Error(\"over retransmitCount\");\n      log(\"retransmit\", this.dtls.flight, this.dtls.sessionType);\n      this.retransmit().then(() => log(this.dtls.flight, \"done\"));\n    }\n  }\n}\n"]}