{"version":3,"file":"flight5.js","sourceRoot":"","sources":["../../../src/flight/client/flight5.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerHello } from \"../../handshake/message/server/hello\";\nimport { Certificate } from \"../../handshake/message/certificate\";\nimport { ServerHelloDone } from \"../../handshake/message/server/helloDone\";\nimport { HandshakeType } from \"../../handshake/const\";\nimport { DtlsContext } from \"../../context/dtls\";\nimport { ServerKeyExchange } from \"../../handshake/message/server/keyExchange\";\nimport { generateKeyPair } from \"../../cipher/namedCurve\";\nimport {\n  prfPreMasterSecret,\n  prfMasterSecret,\n  prfExtendedMasterSecret,\n} from \"../../cipher/prf\";\nimport { ClientKeyExchange } from \"../../handshake/message/client/keyExchange\";\nimport { ChangeCipherSpec } from \"../../handshake/message/changeCipherSpec\";\nimport { Finished } from \"../../handshake/message/finished\";\nimport { createPlaintext } from \"../../record/builder\";\nimport { TransportContext } from \"../../context/transport\";\nimport { DtlsRandom } from \"../../handshake/random\";\nimport { ContentType } from \"../../record/const\";\nimport { createCipher } from \"../../cipher/create\";\nimport { CipherContext } from \"../../context/cipher\";\nimport { ServerCertificateRequest } from \"../../handshake/message/server/certificateRequest\";\nimport { CertificateVerify } from \"../../handshake/message/client/certificateVerify\";\nimport { UseSRTP } from \"../../handshake/extensions/useSrtp\";\nimport { SrtpContext } from \"../../context/srtp\";\nimport { Flight } from \"../flight\";\nimport { FragmentedHandshake } from \"../../record/message/fragment\";\nimport debug from \"debug\";\nimport { ExtendedMasterSecret } from \"../../handshake/extensions/extendedMasterSecret\";\nimport { RenegotiationIndication } from \"../../handshake/extensions/renegotiationIndication\";\nimport { SignatureAlgorithm, SignatureScheme } from \"../../cipher/const\";\n\nconst log = debug(\"werift/dtls/flight/client/flight5\");\n\nexport class Flight5 extends Flight {\n  constructor(\n    udp: TransportContext,\n    dtls: DtlsContext,\n    private cipher: CipherContext,\n    private srtp: SrtpContext\n  ) {\n    super(udp, dtls, 5, 7);\n  }\n\n  handleHandshake(handshake: FragmentedHandshake) {\n    this.dtls.bufferHandshakeCache([handshake], false, 4);\n    const message = (() => {\n      switch (handshake.msg_type) {\n        case HandshakeType.server_hello:\n          return ServerHello.deSerialize(handshake.fragment);\n        case HandshakeType.certificate:\n          return Certificate.deSerialize(handshake.fragment);\n        case HandshakeType.server_key_exchange:\n          return ServerKeyExchange.deSerialize(handshake.fragment);\n        case HandshakeType.certificate_request:\n          return ServerCertificateRequest.deSerialize(handshake.fragment);\n        case HandshakeType.server_hello_done:\n          return ServerHelloDone.deSerialize(handshake.fragment);\n      }\n    })();\n\n    if (message) {\n      handlers[message.msgType]({\n        dtls: this.dtls,\n        cipher: this.cipher,\n        srtp: this.srtp,\n      })(message);\n    }\n  }\n\n  exec() {\n    if (this.dtls.flight === 5) {\n      log(\"flight5 twice\");\n      this.send(this.dtls.lastMessage);\n      return;\n    }\n    this.dtls.flight = 5;\n\n    const packets = [\n      this.dtls.requestedCertificateTypes.length > 0 && this.sendCertificate(),\n      this.sendClientKeyExchange(),\n      this.dtls.requestedCertificateTypes.length > 0 &&\n        this.sendCertificateVerify(),\n      this.sendChangeCipherSpec(),\n      this.sendFinished(),\n    ].filter((v) => v) as Buffer[];\n\n    this.dtls.lastMessage = packets;\n    this.transmit(packets);\n  }\n\n  sendCertificate() {\n    const certificate = new Certificate([Buffer.from(this.cipher.localCert)]);\n\n    const packets = this.createPacket([certificate]);\n\n    const buf = Buffer.concat(packets.map((v) => v.serialize()));\n    return buf;\n  }\n\n  sendClientKeyExchange() {\n    if (!this.cipher.localKeyPair) throw new Error();\n\n    const clientKeyExchange = new ClientKeyExchange(\n      this.cipher.localKeyPair.publicKey\n    );\n    const packets = this.createPacket([clientKeyExchange]);\n    const buf = Buffer.concat(packets.map((v) => v.serialize()));\n\n    const localKeyPair = this.cipher.localKeyPair!;\n    const remoteKeyPair = this.cipher.remoteKeyPair!;\n\n    const preMasterSecret = prfPreMasterSecret(\n      remoteKeyPair.publicKey!,\n      localKeyPair.privateKey,\n      localKeyPair.curve\n    );\n\n    log(\n      \"extendedMasterSecret\",\n      this.dtls.options.extendedMasterSecret,\n      this.dtls.remoteExtendedMasterSecret\n    );\n\n    const handshakes = Buffer.concat(\n      this.dtls.handshakeCache.map((v) => v.data.serialize())\n    );\n    this.cipher.masterSecret =\n      this.dtls.options.extendedMasterSecret &&\n      this.dtls.remoteExtendedMasterSecret\n        ? prfExtendedMasterSecret(preMasterSecret, handshakes)\n        : prfMasterSecret(\n            preMasterSecret,\n            this.cipher.localRandom!.serialize(),\n            this.cipher.remoteRandom!.serialize()\n          );\n\n    this.cipher.cipher = createCipher(this.cipher.cipherSuite!);\n    this.cipher.cipher.init(\n      this.cipher.masterSecret,\n      this.cipher.remoteRandom!.serialize(),\n      this.cipher.localRandom!.serialize()\n    );\n\n    return buf;\n  }\n\n  sendCertificateVerify() {\n    const cache = Buffer.concat(\n      this.dtls.handshakeCache.map((v) => v.data.serialize())\n    );\n    const signed = this.cipher.signatureData(cache, \"sha256\");\n    const signatureScheme = (() => {\n      switch (this.cipher.signatureHashAlgorithm?.signature) {\n        case SignatureAlgorithm.ecdsa:\n          return SignatureScheme.ecdsa_secp256r1_sha256;\n        case SignatureAlgorithm.rsa:\n          return SignatureScheme.rsa_pkcs1_sha256;\n      }\n    })();\n    if (!signatureScheme) throw new Error();\n    log(\n      \"signatureScheme\",\n      this.cipher.signatureHashAlgorithm?.signature,\n      signatureScheme\n    );\n\n    const certificateVerify = new CertificateVerify(signatureScheme, signed);\n    const packets = this.createPacket([certificateVerify]);\n    const buf = Buffer.concat(packets.map((v) => v.serialize()));\n    return buf;\n  }\n\n  sendChangeCipherSpec() {\n    const changeCipherSpec = ChangeCipherSpec.createEmpty().serialize();\n    const packets = createPlaintext(this.dtls)(\n      [{ type: ContentType.changeCipherSpec, fragment: changeCipherSpec }],\n      ++this.dtls.recordSequenceNumber\n    );\n    const buf = Buffer.concat(packets.map((v) => v.serialize()));\n    return buf;\n  }\n\n  sendFinished() {\n    const cache = Buffer.concat(\n      this.dtls.handshakeCache.map((v) => v.data.serialize())\n    );\n    const localVerifyData = this.cipher.verifyData(cache);\n\n    const finish = new Finished(localVerifyData);\n    this.dtls.epoch = 1;\n    const [packet] = this.createPacket([finish]);\n\n    this.dtls.recordSequenceNumber = 0;\n\n    const buf = this.cipher.encryptPacket(packet).serialize();\n    return buf;\n  }\n}\n\nconst handlers: {\n  [key: number]: (contexts: {\n    dtls: DtlsContext;\n    cipher: CipherContext;\n    srtp: SrtpContext;\n  }) => (message: any) => void;\n} = {};\n\nhandlers[HandshakeType.server_hello] = ({ cipher, srtp, dtls }) => (\n  message: ServerHello\n) => {\n  log(\"serverHello\", message);\n  cipher.remoteRandom = DtlsRandom.from(message.random);\n  cipher.cipherSuite = message.cipherSuite;\n  log(\"selected cipherSuite\", cipher.cipherSuite);\n\n  if (message.extensions) {\n    message.extensions.forEach((extension) => {\n      switch (extension.type) {\n        case UseSRTP.type:\n          const useSrtp = UseSRTP.fromData(extension.data);\n          const profile = SrtpContext.findMatchingSRTPProfile(\n            useSrtp.profiles,\n            dtls.options.srtpProfiles || []\n          );\n          log(\"selected srtp profile\", profile);\n          if (profile == undefined) return;\n          srtp.srtpProfile = profile;\n          break;\n        case ExtendedMasterSecret.type:\n          dtls.remoteExtendedMasterSecret = true;\n          break;\n        case RenegotiationIndication.type:\n          log(\"RenegotiationIndication\", extension.data);\n          break;\n      }\n    });\n  }\n};\n\nhandlers[HandshakeType.certificate] = ({ cipher }) => (\n  message: Certificate\n) => {\n  log(\"handshake certificate\", message);\n  cipher.remoteCertificate = message.certificateList[0];\n};\n\nhandlers[HandshakeType.server_key_exchange] = ({ cipher }) => (\n  message: ServerKeyExchange\n) => {\n  if (!cipher.localRandom || !cipher.remoteRandom) throw new Error();\n  log(\"ServerKeyExchange\", message);\n\n  log(\"selected curve\", message.namedCurve);\n  cipher.remoteKeyPair = {\n    curve: message.namedCurve,\n    publicKey: message.publicKey,\n  };\n  cipher.localKeyPair = generateKeyPair(message.namedCurve);\n};\n\nhandlers[HandshakeType.server_hello_done] = () => (msg) => {\n  log(\"server_hello_done\", msg);\n};\n\nhandlers[HandshakeType.certificate_request] = ({ dtls }) => (\n  message: ServerCertificateRequest\n) => {\n  log(\"certificate_request\", message);\n  dtls.requestedCertificateTypes = message.certificateTypes;\n  dtls.requestedSignatureAlgorithms = message.signatures;\n};\n"]}